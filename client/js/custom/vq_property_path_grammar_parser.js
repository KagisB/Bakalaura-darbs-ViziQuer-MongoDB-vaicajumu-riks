(function() {
vq_property_path_grammar_parser = (function() {											   
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  async function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  async function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { Path: peg$parsePath },
        peg$startRuleFunction  = peg$parsePath,

        peg$c0 = "++",
        peg$c1 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c2 = "==",
        peg$c3 = { type: "literal", value: "==", description: "\"==\"" },
        peg$c4 = async function(PathProperty) {return {PathProperty:PathProperty}},
        peg$c5 = async function(PathAlternative) {return {PathAlternative:PathAlternative}},
        peg$c6 = async function(PathSequence) {return {PathSequence:PathSequence}},
        peg$c7 = async function(PathEltOrInverse) {return {PathEltOrInverse:PathEltOrInverse}},
        peg$c8 = async function(PathElt) {return {inv:"", PathElt:PathElt}},
        peg$c9 = "^",
        peg$c10 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c11 = async function(PathElt) {return {inv:"^", PathElt:PathElt}},
        peg$c12 = "inv",
        peg$c13 = { type: "literal", value: "inv", description: "\"inv\"" },
        peg$c14 = "(",
        peg$c15 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c16 = ")",
        peg$c17 = { type: "literal", value: ")", description: "\")\"" },
        peg$c18 = async function(PathPrimary, PathMod) {return {PathPrimary:PathPrimary, PathMod:PathMod}},
        peg$c19 = "!",
        peg$c20 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c21 = "a",
        peg$c22 = { type: "literal", value: "a", description: "\"a\"" },
        peg$c23 = async function(PathNegatedPropertySet) {return {PathNegatedPropertySet:PathNegatedPropertySet}},
        peg$c24 = async function(PathOneInPropertySet) {return {PathOneInPropertySet:PathOneInPropertySet}},
        peg$c25 = async function(PathNegatedPropertySetBracketted) {return {PathNegatedPropertySetBracketted:PathNegatedPropertySetBracketted}},
        peg$c26 = async function(iriOra) {return {inv:"", iriOra:iriOra}},
        peg$c27 = async function(iriOra) {return {inv:"^", iriOra:iriOra}},
        peg$c28 = "?",
        peg$c29 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c30 = "*",
        peg$c31 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c32 = "+",
        peg$c33 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c34 = async function(PrefixedName) {return {PrefixedName:PrefixedName}},
        peg$c35 = "<",
        peg$c36 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c37 = /^[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]/,
        peg$c38 = { type: "class", value: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]", description: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]" },
        peg$c39 = "_",
        peg$c40 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c41 = ":",
        peg$c42 = { type: "literal", value: ":", description: "\":\"" },
        peg$c43 = ".",
        peg$c44 = { type: "literal", value: ".", description: "\".\"" },
        peg$c45 = "#",
        peg$c46 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c47 = "/",
        peg$c48 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c49 = "-",
        peg$c50 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c51 = /^[0-9]/,
        peg$c52 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c53 = ">",
        peg$c54 = { type: "literal", value: ">", description: "\">\"" },
        peg$c55 = async function(IRIREF) {return {IRIREF:makeVar(IRIREF)}},
        peg$c56 = async function(Prefix) {return makeVar(Prefix)},
        peg$c57 = async function(PNAME_NS, LName) {return {var:{name:makeVar(LName),type:await resolveType(makeVar(PNAME_NS)+makeVar(LName)), kind:await resolveKind(makeVar(PNAME_NS)+makeVar(LName))}, Prefix:PNAME_NS}},
        peg$c58 = async function(LName) {return {var:{name:makeVar(LName),type:await resolveType(makeVar(LName)), kind:await resolveKind(makeVar(LName))}}},
        peg$c59 = async function(LName) {return {var:{name:makeVar(LName), type:await resolveType(makeVar(LName)), kind:await resolveKind(makeVar(LName))}}},
        peg$c60 = "[",
        peg$c61 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c62 = "]",
        peg$c63 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c64 = "??",
        peg$c65 = { type: "literal", value: "??", description: "\"??\"" },
        peg$c66 = async function(Var) {return {VariableName:makeVar(Var)}},
        peg$c67 = " ",
        peg$c68 = { type: "literal", value: " ", description: "\" \"" },
        peg$c69 = "..",
        peg$c70 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c71 = async function() {return },
        peg$c72 = "|",
        peg$c73 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c74 = async function() {return {Alternative:"|"}},
        peg$c75 = async function() {return {PathSymbol :"/"}},

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    async function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    async function location() {
      return await peg$computeLocation(peg$savedPos, peg$currPos);
    }

    async function expected(description) {
      throw await peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function error(message) {
      throw await peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    async function peg$computeLocation(startPos, endPos) {
      var startPosDetails = await peg$computePosDetails(startPos),
          endPosDetails   = await peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    async function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    async function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    async function peg$parsePath() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 34 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathAlternative();
        if (s2 === peg$FAILED) {
          s2 = await peg$parseVAR();
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c0) {
              s2 = peg$c0;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c1); }
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c2) {
                s2 = peg$c2;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c3); }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c4(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathAlternative() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 34 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePathSequence();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = await peg$parsespace();
        if (s5 !== peg$FAILED) {
          s6 = await peg$parseVERTICAL();
          if (s6 !== peg$FAILED) {
            s7 = await peg$parsespace();
            if (s7 !== peg$FAILED) {
              s8 = await peg$parsePathSequence();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = await peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseVERTICAL();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parsespace();
              if (s7 !== peg$FAILED) {
                s8 = await peg$parsePathSequence();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c5(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathSequence() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 34 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePathEltOrInverse();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = await peg$parsePATH_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = await peg$parsePathEltOrInverse();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = await peg$parsePATH_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parsePathEltOrInverse();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c6(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathEltOrInverse() {
      var s0, s1;

      var key    = peg$currPos * 34 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathElt3();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePathElt1();
        if (s1 === peg$FAILED) {
          s1 = await peg$parsePathElt2();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c7(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt1() {
      var s0, s1;

      var key    = peg$currPos * 34 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathElt();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c8(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt2() {
      var s0, s1, s2;

      var key    = peg$currPos * 34 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathElt();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c11(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt3() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 34 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c12) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c13); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsePathElt();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c17); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = await peg$c11(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt() {
      var s0, s1, s2;

      var key    = peg$currPos * 34 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathPrimary();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathMod();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c18(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathPrimary() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 34 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c19;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathNegatedPropertySet();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = await peg$parseDoubleSquareBracketName();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseiri();
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
              s1 = peg$c14;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c15); }
            }
            if (s1 !== peg$FAILED) {
              s2 = await peg$parsespace();
              if (s2 !== peg$FAILED) {
                s3 = await peg$parsePath();
                if (s3 !== peg$FAILED) {
                  s4 = await peg$parsespace();
                  if (s4 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s5 = peg$c16;
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                    }
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = await peg$parseLName();
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 97) {
                  s0 = peg$c21;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c22); }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySet() {
      var s0, s1;

      var key    = peg$currPos * 34 + 9,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathNegatedPropertySet2();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePathNegatedPropertySet1();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c23(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySet1() {
      var s0, s1;

      var key    = peg$currPos * 34 + 10,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathOneInPropertySet();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c24(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySet2() {
      var s0, s1;

      var key    = peg$currPos * 34 + 11,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathNegatedPropertySetBracketted();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c25(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySetBracketted() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 34 + 12,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parsePathOneInPropertySet();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = await peg$parsespace();
            if (s7 !== peg$FAILED) {
              s8 = await peg$parseVERTICAL();
              if (s8 !== peg$FAILED) {
                s9 = await peg$parsespace();
                if (s9 !== peg$FAILED) {
                  s10 = await peg$parsePathOneInPropertySet();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = await peg$parsespace();
              if (s7 !== peg$FAILED) {
                s8 = await peg$parseVERTICAL();
                if (s8 !== peg$FAILED) {
                  s9 = await peg$parsespace();
                  if (s9 !== peg$FAILED) {
                    s10 = await peg$parsePathOneInPropertySet();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c17); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet() {
      var s0;

      var key    = peg$currPos * 34 + 13,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parsePathOneInPropertySet3();
      if (s0 === peg$FAILED) {
        s0 = await peg$parsePathOneInPropertySet1();
        if (s0 === peg$FAILED) {
          s0 = await peg$parsePathOneInPropertySet2();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet1() {
      var s0, s1;

      var key    = peg$currPos * 34 + 14,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseDoubleSquareBracketName();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseiri();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseLName();
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 97) {
              s1 = peg$c21;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c22); }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c26(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet2() {
      var s0, s1, s2;

      var key    = peg$currPos * 34 + 15,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c9;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c10); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseDoubleSquareBracketName();
        if (s2 === peg$FAILED) {
          s2 = await peg$parseiri();
          if (s2 === peg$FAILED) {
            s2 = await peg$parseLName();
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 97) {
                s2 = peg$c21;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c22); }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c27(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet3() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 34 + 16,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c12) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c13); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseDoubleSquareBracketName();
          if (s3 === peg$FAILED) {
            s3 = await peg$parseiri();
            if (s3 === peg$FAILED) {
              s3 = await peg$parseLName();
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 97) {
                  s3 = peg$c21;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c22); }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c17); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = await peg$c27(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathMod() {
      var s0;

      var key    = peg$currPos * 34 + 17,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 63) {
        s0 = peg$c28;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c29); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c30;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c31); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c32;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c33); }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiri() {
      var s0;

      var key    = peg$currPos * 34 + 18,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseIRIREF();
      if (s0 === peg$FAILED) {
        s0 = await peg$parsePrefixedName();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePrefixedName() {
      var s0, s1;

      var key    = peg$currPos * 34 + 19,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePNAME_LN();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePNAME_NS();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c34(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIRIREF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 34 + 20,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s2 = peg$c35;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c36); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c37.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c38); }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s4 = peg$c39;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c40); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c41;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c42); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c43;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c44); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 35) {
                  s4 = peg$c45;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c46); }
                }
                if (s4 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s4 = peg$c47;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c48); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s4 = peg$c49;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c50); }
                    }
                    if (s4 === peg$FAILED) {
                      if (peg$c51.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c52); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c37.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c38); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c39;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c40); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c41;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c42); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c43;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c44); }
                }
                if (s4 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s4 = peg$c45;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c46); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                      s4 = peg$c47;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c48); }
                    }
                    if (s4 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 45) {
                        s4 = peg$c49;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c50); }
                      }
                      if (s4 === peg$FAILED) {
                        if (peg$c51.test(input.charAt(peg$currPos))) {
                          s4 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c52); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s4 = peg$c53;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c54); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c55(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_NS() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 34 + 21,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parseChars_String_prefix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c41;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c42); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c56(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_LN() {
      var s0, s1, s2;

      var key    = peg$currPos * 34 + 22,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePNAME_NS();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_prefix();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c57(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLName() {
      var s0, s1;

      var key    = peg$currPos * 34 + 23,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseChars_String_prefix();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c58(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDoubleSquareBracketName() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 34 + 24,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsesquarePrefix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parsesquareVariable();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c59(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesquarePrefix() {
      var s0, s1, s2;

      var key    = peg$currPos * 34 + 25,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseChars_String_prefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c41;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c42); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesquareVariable() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 34 + 26,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c60;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_square();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c62;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c63); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVAR() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 34 + 27,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c64) {
        s2 = peg$c64;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c65); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 63) {
          s2 = peg$c28;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c29); }
        }
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parseVARNAME();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c66(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVARNAME() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 34 + 28,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c38); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c39;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c40); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c37.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c38); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c39;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c40); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s3 = peg$c49;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c50); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c51.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c52); }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c37.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c38); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c39;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c40); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c49;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c50); }
              }
              if (s3 === peg$FAILED) {
                if (peg$c51.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c52); }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_square() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 34 + 29,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c38); }
      }
      if (s1 === peg$FAILED) {
        if (peg$c51.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c52); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s1 = peg$c39;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c40); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c37.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c38); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c39;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c40); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c43;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c44); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 32) {
                s3 = peg$c67;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c68); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s3 = peg$c47;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c48); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s3 = peg$c49;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c50); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s3 = peg$c14;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s3 = peg$c16;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                      }
                      if (s3 === peg$FAILED) {
                        if (peg$c51.test(input.charAt(peg$currPos))) {
                          s3 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c52); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c37.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c38); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c39;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c40); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c43;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c44); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s3 = peg$c67;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c68); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s3 = peg$c47;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c48); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s3 = peg$c49;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c50); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c14;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s3 = peg$c16;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s3 === peg$FAILED) {
                          if (peg$c51.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c52); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_prefix() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 34 + 30,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c37.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c38); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c39;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c40); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c49;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c50); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c37.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c38); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c39;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c40); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s3 = peg$c49;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c50); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c51.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c52); }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c37.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c38); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c39;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c40); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c49;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c50); }
              }
              if (s3 === peg$FAILED) {
                if (peg$c51.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c52); }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c69) {
            s4 = peg$c69;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c70); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c51.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c52); }
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c51.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c52); }
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsespace() {
      var s0, s1, s2;

      var key    = peg$currPos * 34 + 31,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c67;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c68); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c67;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c68); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c71();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVERTICAL() {
      var s0, s1;

      var key    = peg$currPos * 34 + 32,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c72;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c73); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c74();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePATH_SYMBOL() {
      var s0, s1;

      var key    = peg$currPos * 34 + 33,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s1 = peg$c47;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c48); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c43;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c44); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c75();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


    			// parse can have multiple arguments
    			// parse(string, options) where options is an object
    			// {schema: VQ_Schema, symbol_table:JSON, context:class_identification_object}
          options = arguments[1];
    			//console.log(options);

    			function makeVar(o) {return makeString(o);};
    			// string -> idObject
    			// returns type of the identifier from symbol table. Null if does not exist.
    			// returns type of the identifier from symbol table. Null if does not exist.
    			async function resolveTypeFromSymbolTable(id) {
    				var context = options.context;
    				
    				if(typeof options.symbol_table[context] === 'undefined') return null;
    				
    				var st_row = options.symbol_table[context][id]; 
    				if (st_row) { 
    					if(st_row.length == 0) return null;
    					if(st_row.length == 1){
    						return st_row[0].type 
    					}
    					if(st_row.length > 1){
    						for (var symbol in st_row) {
    							if(st_row[symbol]["context"] == context) return st_row[symbol].type;
    						}
    					}
    					return st_row.type 
    				} else { 
    					return null 
    				} 
    			};
    			// string -> idObject
    			// returns kind of the identifier from symbol table. Null if does not exist.
    			async function resolveKindFromSymbolTable(id) { 
    				var context = options.context;
    				
    				if(typeof options.symbol_table[context] === 'undefined') return null;
    				
    				var st_row = options.symbol_table[context][id]; 
    				if (st_row) { 
    					if(st_row.length == 0) return null;
    					if(st_row.length == 1){
    						return st_row[0].kind 
    					}
    					if(st_row.length > 1){
    						for (var symbol in st_row) {
    							if(st_row[symbol]["context"] == context) return st_row[symbol].kind;
    						}
    					}
    					return st_row.kind 
    				} else { 
    					return null 
    				} 
    			};
    			// string -> idObject
    			// returns type of the identifier from schema assuming that it is name of the class. Null if does not exist
    			async function resolveTypeFromSchemaForClass(id) {
					if(options.schemaName.toLowerCase() == "wikidata" && ((id.startsWith("[") && id.endsWith("]")) || id.indexOf(":") == -1)){
						id = "wd:"+id;
					}
					var cls = await dataShapes.resolveClassByName({name: id})
					if(cls["complite"] == false) return null;
					if(cls["data"].length > 0){
						return cls["data"][0];
					}
					
					return null;
				};
    			// string -> idObject
    			// returns type of the identifier from schema assuming that it is name of the property (attribute or association). Null if does not exist
    			async function resolveTypeFromSchemaForAttributeAndLink(id) {
					if(options.schemaName.toLowerCase() == "wikidata" && ((id.startsWith("[") && id.endsWith("]")) || id.indexOf(":") == -1)){
						id = "wdt:"+id;
					}
					var aorl = await dataShapes.resolvePropertyByName({name: id})
	
					if(aorl["complite"] == false) return null;
					
					var res = aorl["data"][0];
					if(res){
						if(res["data_cnt"] > 0 && res["object_cnt"] > 0) res["property_type"] = "DATA_OBJECT_PROPERTY";
						else if(res["data_cnt"] > 0) res["property_type"] = "DATA_PROPERTY";
						else if(res["object_cnt"] > 0) res["property_type"] = "OBJECT_PROPERTY";
						return res;
					}
					return null;
				};
    			// string -> idObject
    			// returns type of the identifier from schema. Looks everywhere. First in the symbol table,
    			// then in schema. Null if does not exist
    			async function resolveType(id) {var t=await resolveTypeFromSymbolTable(id);
					if (!t) {
						t=await resolveTypeFromSchemaForAttributeAndLink(id); 
						if (!t) {t=await resolveTypeFromSchemaForClass(id)}
					} 
					
					return t;
				};
    			//string -> string
    			// resolves kind of id. CLASS_ALIAS, PROPERTY_ALIAS, CLASS_NAME, CLASS_ALIAS, null
    			async function resolveKind(id) {
    				    var k=await resolveKindFromSymbolTable(id);
    						if (!k) {
    							if (await resolveTypeFromSchemaForAttributeAndLink(id)) {
    							    k="PROPERTY_NAME";
    						  } else if (await resolveTypeFromSchemaForClass(id)) {
    								  k="CLASS_NAME";
    							}
    					  }
    						return k;
    			};
    		

    peg$result = await peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        await peg$fail({ type: "end", description: "end of input" });
      }

      throw await peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? await peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : await peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()
}).call(this);