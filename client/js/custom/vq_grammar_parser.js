(function() {
vq_grammar_parser = (function() {													   
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  async function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  async function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { Main: peg$parseMain },
        peg$startRuleFunction  = peg$parseMain,

        peg$c0 = "[ ]",
        peg$c1 = { type: "literal", value: "[ ]", description: "\"[ ]\"" },
        peg$c2 = "[ + ]",
        peg$c3 = { type: "literal", value: "[ + ]", description: "\"[ + ]\"" },
        peg$c4 = "(no_class)",
        peg$c5 = { type: "literal", value: "(no_class)", description: "\"(no_class)\"" },
        peg$c6 = "{",
        peg$c7 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c8 = "}",
        peg$c9 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c10 = async function(ValueScope) {return {ValueScope:ValueScope}},
        peg$c11 = "..",
        peg$c12 = { type: "literal", value: "..", description: "\"..\"" },
        peg$c13 = async function(IntStart, IntEnd) {return transformExpressionIntegerScopeToList(IntStart, IntEnd)},
        peg$c14 = "(",
        peg$c15 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c16 = ")",
        peg$c17 = { type: "literal", value: ")", description: "\")\"" },
        peg$c18 = async function(Scope) {return {Scope: Scope}},
        peg$c19 = "(.)",
        peg$c20 = { type: "literal", value: "(.)", description: "\"(.)\"" },
        peg$c21 = ".",
        peg$c22 = { type: "literal", value: ".", description: "\".\"" },
        peg$c23 = "(select this)",
        peg$c24 = { type: "literal", value: "(select this)", description: "\"(select this)\"" },
        peg$c25 = "(this)",
        peg$c26 = { type: "literal", value: "(this)", description: "\"(this)\"" },
        peg$c27 = async function() {return {classExpr: "true"}},
        peg$c28 = async function(ConditionalOrExpression) {return {ConditionalOrExpression: ConditionalOrExpression}},
        peg$c29 = "||",
        peg$c30 = { type: "literal", value: "||", description: "\"||\"" },
        peg$c31 = "or",
        peg$c32 = { type: "literal", value: "OR", description: "\"OR\"" },
        peg$c33 = async function(OROriginal) {return {OROriginal:"||"}},
        peg$c34 = async function(ConditionalAndExpression) {return {ConditionalAndExpression:ConditionalAndExpression}},
        peg$c35 = "&&",
        peg$c36 = { type: "literal", value: "&&", description: "\"&&\"" },
        peg$c37 = "and",
        peg$c38 = { type: "literal", value: "AND", description: "\"AND\"" },
        peg$c39 = async function(ANDOriginal) {return {ANDOriginal:"&&"}},
        peg$c40 = async function(RelationalExpression) {return {RelationalExpression:RelationalExpression}},
        peg$c41 = async function(NumericExpressionL) {return {NumericExpressionL:NumericExpressionL}},
        peg$c42 = async function(NumericExpressionL, Relation, NumericExpressionR) {return {NumericExpressionL:NumericExpressionL, Relation:Relation, NumericExpressionR:NumericExpressionR}},
        peg$c43 = async function(classExpr, Relation, NumericExpressionR) {return {classExpr:"true", Relation:Relation, NumericExpressionR:NumericExpressionR}},
        peg$c44 = async function(NumericExpressionL, Relation, classExpr) {return {NumericExpressionL:NumericExpressionL, Relation:Relation, classExpr:"true"}},
        peg$c45 = async function(NumericExpressionL, Relation, ExpressionList) {return {NumericExpressionL:NumericExpressionL, Relation:Relation, ExpressionList:ExpressionList}},
        peg$c46 = "in",
        peg$c47 = { type: "literal", value: "IN", description: "\"IN\"" },
        peg$c48 = async function() {return "IN"},
        peg$c49 = "not",
        peg$c50 = { type: "literal", value: "NOT", description: "\"NOT\"" },
        peg$c51 = async function() {return "NOT"},
        peg$c52 = async function(Not) {return Not.join("")},
        peg$c53 = async function(AdditiveExpression) {return {AdditiveExpression:AdditiveExpression}},
        peg$c54 = async function(MultiplicativeExpression, MultiplicativeExpressionList) {return {MultiplicativeExpression:MultiplicativeExpression,  MultiplicativeExpressionList:MultiplicativeExpressionList}},
        peg$c55 = "++",
        peg$c56 = { type: "literal", value: "++", description: "\"++\"" },
        peg$c57 = async function(Concat, MultiplicativeExpression) {return {Concat:Concat, MultiplicativeExpression}},
        peg$c58 = "+",
        peg$c59 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c60 = "-",
        peg$c61 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c62 = async function(Additive, MultiplicativeExpression) {return {Additive:Additive, MultiplicativeExpression}},
        peg$c63 = async function(UnaryExpression, UnaryExpressionList) {return {UnaryExpression:UnaryExpression, UnaryExpressionList:UnaryExpressionList}},
        peg$c64 = "!",
        peg$c65 = { type: "literal", value: "!", description: "\"!\"" },
        peg$c66 = async function(Additive, PrimaryExpression) {return {Additive:Additive, PrimaryExpression:PrimaryExpression}},
        peg$c67 = async function(PrimaryExpression) {return {PrimaryExpression:PrimaryExpression}},
        peg$c68 = "*",
        peg$c69 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c70 = "/",
        peg$c71 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c72 = async function(Unary, UnaryExpression) {return {Unary:Unary, UnaryExpression:UnaryExpression}},
        peg$c73 = async function(BooleanLiteral) {return {BooleanLiteral:BooleanLiteral}},
        peg$c74 = "true",
        peg$c75 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c76 = async function() {return "true"},
        peg$c77 = "false",
        peg$c78 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c79 = async function() {return "false"},
        peg$c80 = async function(RDFLiteral) {return {RDFLiteral:RDFLiteral}},
        peg$c81 = async function(String, LANGTAG) {return {String:makeVar(String), LANGTAG:makeVar(LANGTAG)}},
        peg$c82 = "^^",
        peg$c83 = { type: "literal", value: "^^", description: "\"^^\"" },
        peg$c84 = async function(String, iri) {return {String:makeVar(String), iri:iri}},
        peg$c85 = async function(BrackettedExpression) {return {BrackettedExpression:BrackettedExpression}},
        peg$c86 = async function(Aggregate) {return {Aggregate:Aggregate}},
        peg$c87 = async function(Aggregate, Expression) {return {Aggregate:"COUNT", DISTINCT:"DISTINCT", Expression:Expression}},
        peg$c88 = async function(Aggregate, DISTINCT, Expression) {return {Aggregate:Aggregate, DISTINCT:DISTINCT, Expression:Expression}},
        peg$c89 = async function(Aggregate, Expression) {return {Aggregate:Aggregate, Expression:Expression}},
        peg$c90 = async function(Aggregate, DISTINCT, Expression, SEPARATOR) {return {Aggregate:Aggregate, DISTINCT:DISTINCT, Expression:Expression, SEPARATOR:SEPARATOR}},
        peg$c91 = async function(Aggregate, Expression, SEPARATOR) {return {Aggregate:Aggregate, Expression:Expression, SEPARATOR:SEPARATOR}},
        peg$c92 = "count_distinct",
        peg$c93 = { type: "literal", value: "COUNT_DISTINCT", description: "\"COUNT_DISTINCT\"" },
        peg$c94 = async function() {return "COUNT_DISTINCT"},
        peg$c95 = "distinct",
        peg$c96 = { type: "literal", value: "DISTINCT", description: "\"DISTINCT\"" },
        peg$c97 = async function() {return "DISTINCT"},
        peg$c98 = "count",
        peg$c99 = { type: "literal", value: "COUNT", description: "\"COUNT\"" },
        peg$c100 = async function() {return "COUNT"},
        peg$c101 = "sum",
        peg$c102 = { type: "literal", value: "SUM", description: "\"SUM\"" },
        peg$c103 = async function() {return "SUM"},
        peg$c104 = "min",
        peg$c105 = { type: "literal", value: "MIN", description: "\"MIN\"" },
        peg$c106 = async function() {return "MIN"},
        peg$c107 = "max",
        peg$c108 = { type: "literal", value: "MAX", description: "\"MAX\"" },
        peg$c109 = async function() {return "MAX"},
        peg$c110 = "avg",
        peg$c111 = { type: "literal", value: "AVG", description: "\"AVG\"" },
        peg$c112 = async function() {return "AVG"},
        peg$c113 = "sample",
        peg$c114 = { type: "literal", value: "SAMPLE", description: "\"SAMPLE\"" },
        peg$c115 = async function() {return "SAMPLE"},
        peg$c116 = "group_concat",
        peg$c117 = { type: "literal", value: "GROUP_CONCAT", description: "\"GROUP_CONCAT\"" },
        peg$c118 = async function() {return "GROUP_CONCAT"},
        peg$c119 = "separator",
        peg$c120 = { type: "literal", value: "SEPARATOR", description: "\"SEPARATOR\"" },
        peg$c121 = async function() {return "SEPARATOR"},
        peg$c122 = ";",
        peg$c123 = { type: "literal", value: ";", description: "\";\"" },
        peg$c124 = "=",
        peg$c125 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c126 = ",",
        peg$c127 = { type: "literal", value: ",", description: "\",\"" },
        peg$c128 = async function(comma, SEPAR) {return makeVar(SEPAR)},
        peg$c129 = async function(FunctionExpression) {return {FunctionExpression:FunctionExpression}},
        peg$c130 = "undef",
        peg$c131 = { type: "literal", value: "UNDEF", description: "\"UNDEF\"" },
        peg$c132 = async function() {return {UNDEF:"UNDEF"}},
        peg$c133 = "str",
        peg$c134 = { type: "literal", value: "STR", description: "\"STR\"" },
        peg$c135 = async function() {return "STR"},
        peg$c136 = "lang",
        peg$c137 = { type: "literal", value: "LANG", description: "\"LANG\"" },
        peg$c138 = async function() {return "LANG"},
        peg$c139 = "datatype",
        peg$c140 = { type: "literal", value: "DATATYPE", description: "\"DATATYPE\"" },
        peg$c141 = async function() {return "DATATYPE"},
        peg$c142 = "iri",
        peg$c143 = { type: "literal", value: "IRI", description: "\"IRI\"" },
        peg$c144 = async function() {return "IRI"},
        peg$c145 = "uri",
        peg$c146 = { type: "literal", value: "URI", description: "\"URI\"" },
        peg$c147 = async function() {return "URI"},
        peg$c148 = "abs",
        peg$c149 = { type: "literal", value: "ABS", description: "\"ABS\"" },
        peg$c150 = async function() {return "ABS"},
        peg$c151 = "ceil",
        peg$c152 = { type: "literal", value: "CEIL", description: "\"CEIL\"" },
        peg$c153 = async function() {return "CEIL"},
        peg$c154 = "floor",
        peg$c155 = { type: "literal", value: "FLOOR", description: "\"FLOOR\"" },
        peg$c156 = async function() {return "FLOOR"},
        peg$c157 = "round",
        peg$c158 = { type: "literal", value: "ROUND", description: "\"ROUND\"" },
        peg$c159 = async function() {return "ROUND"},
        peg$c160 = "strlen",
        peg$c161 = { type: "literal", value: "STRLEN", description: "\"STRLEN\"" },
        peg$c162 = async function() {return "STRLEN"},
        peg$c163 = "ucase",
        peg$c164 = { type: "literal", value: "UCASE", description: "\"UCASE\"" },
        peg$c165 = async function() {return "UCASE"},
        peg$c166 = "lcase",
        peg$c167 = { type: "literal", value: "LCASE", description: "\"LCASE\"" },
        peg$c168 = async function() {return "LCASE"},
        peg$c169 = "encode_for_uri",
        peg$c170 = { type: "literal", value: "ENCODE_FOR_URI", description: "\"ENCODE_FOR_URI\"" },
        peg$c171 = async function() {return "ENCODE_FOR_URI"},
        peg$c172 = "year",
        peg$c173 = { type: "literal", value: "YEAR", description: "\"YEAR\"" },
        peg$c174 = async function() {return "YEAR"},
        peg$c175 = "month",
        peg$c176 = { type: "literal", value: "MONTH", description: "\"MONTH\"" },
        peg$c177 = async function() {return "MONTH"},
        peg$c178 = "day",
        peg$c179 = { type: "literal", value: "DAY", description: "\"DAY\"" },
        peg$c180 = async function() {return "DAY"},
        peg$c181 = "timezone",
        peg$c182 = { type: "literal", value: "TIMEZONE", description: "\"TIMEZONE\"" },
        peg$c183 = async function() {return "TIMEZONE"},
        peg$c184 = "tz",
        peg$c185 = { type: "literal", value: "TZ", description: "\"TZ\"" },
        peg$c186 = async function() {return "TZ"},
        peg$c187 = "md5",
        peg$c188 = { type: "literal", value: "MD5", description: "\"MD5\"" },
        peg$c189 = async function() {return "MD5"},
        peg$c190 = "sha1",
        peg$c191 = { type: "literal", value: "SHA1", description: "\"SHA1\"" },
        peg$c192 = async function() {return "SHA1"},
        peg$c193 = "sha256",
        peg$c194 = { type: "literal", value: "SHA256", description: "\"SHA256\"" },
        peg$c195 = async function() {return "SHA256"},
        peg$c196 = "sha384",
        peg$c197 = { type: "literal", value: "SHA384", description: "\"SHA384\"" },
        peg$c198 = async function() {return "SHA384"},
        peg$c199 = "sha512",
        peg$c200 = { type: "literal", value: "SHA512", description: "\"SHA512\"" },
        peg$c201 = async function() {return "SHA512"},
        peg$c202 = "isiri",
        peg$c203 = { type: "literal", value: "isIRI", description: "\"isIRI\"" },
        peg$c204 = async function() {return "isIRI"},
        peg$c205 = "isuri",
        peg$c206 = { type: "literal", value: "isURI", description: "\"isURI\"" },
        peg$c207 = async function() {return "isURI"},
        peg$c208 = "isblank",
        peg$c209 = { type: "literal", value: "isBLANK", description: "\"isBLANK\"" },
        peg$c210 = async function() {return "isBLANK"},
        peg$c211 = "datetime",
        peg$c212 = { type: "literal", value: "dateTime", description: "\"dateTime\"" },
        peg$c213 = async function() {return "dateTime"},
        peg$c214 = "date",
        peg$c215 = { type: "literal", value: "date", description: "\"date\"" },
        peg$c216 = async function() {return "date"},
        peg$c217 = "isliteral",
        peg$c218 = { type: "literal", value: "isLITERAL", description: "\"isLITERAL\"" },
        peg$c219 = async function() {return "isLITERAL"},
        peg$c220 = "isnumeric",
        peg$c221 = { type: "literal", value: "isNUMERIC", description: "\"isNUMERIC\"" },
        peg$c222 = async function() {return "isNUMERIC"},
        peg$c223 = "langmatches",
        peg$c224 = { type: "literal", value: "LANGMATCHES", description: "\"LANGMATCHES\"" },
        peg$c225 = async function() {return "LANGMATCHES"},
        peg$c226 = "contains",
        peg$c227 = { type: "literal", value: "CONTAINS", description: "\"CONTAINS\"" },
        peg$c228 = async function() {return "CONTAINS"},
        peg$c229 = "strstarts",
        peg$c230 = { type: "literal", value: "STRSTARTS", description: "\"STRSTARTS\"" },
        peg$c231 = async function() {return "STRSTARTS"},
        peg$c232 = "strends",
        peg$c233 = { type: "literal", value: "STRENDS", description: "\"STRENDS\"" },
        peg$c234 = async function() {return "STRENDS"},
        peg$c235 = "strbefore",
        peg$c236 = { type: "literal", value: "STRBEFORE", description: "\"STRBEFORE\"" },
        peg$c237 = async function() {return "STRBEFORE"},
        peg$c238 = "strafter",
        peg$c239 = { type: "literal", value: "STRAFTER", description: "\"STRAFTER\"" },
        peg$c240 = async function() {return "STRAFTER"},
        peg$c241 = "strlang",
        peg$c242 = { type: "literal", value: "STRLANG", description: "\"STRLANG\"" },
        peg$c243 = async function() {return "STRLANG"},
        peg$c244 = "strdt",
        peg$c245 = { type: "literal", value: "STRDT", description: "\"STRDT\"" },
        peg$c246 = async function() {return "STRDT"},
        peg$c247 = "sameterm",
        peg$c248 = { type: "literal", value: "sameTerm", description: "\"sameTerm\"" },
        peg$c249 = async function() {return "sameTerm"},
        peg$c250 = "days",
        peg$c251 = { type: "literal", value: "days", description: "\"days\"" },
        peg$c252 = async function() {return "days"},
        peg$c253 = "years",
        peg$c254 = { type: "literal", value: "years", description: "\"years\"" },
        peg$c255 = async function() {return "years"},
        peg$c256 = "months",
        peg$c257 = { type: "literal", value: "months", description: "\"months\"" },
        peg$c258 = async function() {return "months"},
        peg$c259 = "hours",
        peg$c260 = { type: "literal", value: "hours", description: "\"hours\"" },
        peg$c261 = async function() {return "HOURS"},
        peg$c262 = async function() {return "hours"},
        peg$c263 = "minutes",
        peg$c264 = { type: "literal", value: "minutes", description: "\"minutes\"" },
        peg$c265 = async function() {return "minutes"},
        peg$c266 = async function() {return "MINUTES"},
        peg$c267 = "seconds",
        peg$c268 = { type: "literal", value: "seconds", description: "\"seconds\"" },
        peg$c269 = async function() {return "seconds"},
        peg$c270 = async function() {return "SECONDS"},
        peg$c271 = "if",
        peg$c272 = { type: "literal", value: "IF", description: "\"IF\"" },
        peg$c273 = async function() {return "IF"},
        peg$c274 = "coalesce",
        peg$c275 = { type: "literal", value: "COALESCE", description: "\"COALESCE\"" },
        peg$c276 = async function() {return "COALESCE"},
        peg$c277 = "bound",
        peg$c278 = { type: "literal", value: "BOUND", description: "\"BOUND\"" },
        peg$c279 = async function() {return "BOUND"},
        peg$c280 = "bnode",
        peg$c281 = { type: "literal", value: "BNODE", description: "\"BNODE\"" },
        peg$c282 = async function() {return "BNODE"},
        peg$c283 = "rand",
        peg$c284 = { type: "literal", value: "RAND", description: "\"RAND\"" },
        peg$c285 = async function() {return "RAND"},
        peg$c286 = "concat",
        peg$c287 = { type: "literal", value: "CONCAT", description: "\"CONCAT\"" },
        peg$c288 = async function() {return "CONCAT"},
        peg$c289 = "now",
        peg$c290 = { type: "literal", value: "NOW", description: "\"NOW\"" },
        peg$c291 = async function() {return "NOW"},
        peg$c292 = "uuid",
        peg$c293 = { type: "literal", value: "UUID", description: "\"UUID\"" },
        peg$c294 = async function() {return "UUID"},
        peg$c295 = "struuid",
        peg$c296 = { type: "literal", value: "STRUUID", description: "\"STRUUID\"" },
        peg$c297 = async function() {return "STRUUID"},
        peg$c298 = async function(Function, Expression) {return {Function:Function, Expression:Expression}},
        peg$c299 = async function(Function, Expression1, Expression2) {return {Function:Function, Expression1:Expression1, Expression2:Expression2}},
        peg$c300 = async function(FunctionTime, PrimaryExpressionL, PrimaryExpressionR) {return {FunctionTime:FunctionTime, PrimaryExpressionL:PrimaryExpressionL, PrimaryExpressionR:PrimaryExpressionR}},
        peg$c301 = async function(Function, ExpressionList) {return {Function:Function, ExpressionList:ExpressionList}},
        peg$c302 = "??",
        peg$c303 = { type: "literal", value: "??", description: "\"??\"" },
        peg$c304 = async function(PrimaryExpression1, PrimaryExpression2) {return {Function:"coalesceShort", PrimaryExpression1:PrimaryExpression1, PrimaryExpression2:PrimaryExpression2}},
        peg$c305 = async function(PrimaryExpression, LANGTAG_MUL) {return {Function:"langmatchesShortMultiple", PrimaryExpression:PrimaryExpression, LANGTAG_MUL:LANGTAG_MUL}},
        peg$c306 = async function(PrimaryExpression, LANGTAG) {return {Function:"langmatchesShort", PrimaryExpression:PrimaryExpression, LANGTAG:makeVar(LANGTAG)}},
        peg$c307 = async function(Function, PrimaryExpression) {return {Function:Function, PrimaryExpression:PrimaryExpression}},
        peg$c308 = async function(Function, NIL) {return {Function:Function, NIL:NIL}},
        peg$c309 = async function(Function, Expression1, Expression2, Expression3) {return {Function:Function, Expression1:Expression1, Expression2:Expression2, Expression3:Expression3}},
        peg$c310 = "HASMAX",
        peg$c311 = { type: "literal", value: "HASMAX", description: "\"HASMAX\"" },
        peg$c312 = async function(HASMAX, SpecialExpression) {return {Function:HASMAX, SpecialExpression:SpecialExpression}},
        peg$c313 = "HASRANK",
        peg$c314 = { type: "literal", value: "HASRANK", description: "\"HASRANK\"" },
        peg$c315 = async function(HASRANK, SpecialExpression) {return {Function:HASRANK, SpecialExpression:SpecialExpression}},
        peg$c316 = "DESC",
        peg$c317 = { type: "literal", value: "DESC", description: "\"DESC\"" },
        peg$c318 = "|",
        peg$c319 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c320 = "GLOBAL",
        peg$c321 = { type: "literal", value: "GLOBAL", description: "\"GLOBAL\"" },
        peg$c322 = "FOR",
        peg$c323 = { type: "literal", value: "FOR", description: "\"FOR\"" },
        peg$c324 = "BY",
        peg$c325 = { type: "literal", value: "BY", description: "\"BY\"" },
        peg$c326 = "WHERE",
        peg$c327 = { type: "literal", value: "WHERE", description: "\"WHERE\"" },
        peg$c328 = async function(RegexExpression) {return {RegexExpression:RegexExpression}},
        peg$c329 = "regex",
        peg$c330 = { type: "literal", value: "REGEX", description: "\"REGEX\"" },
        peg$c331 = async function() {return "REGEX"},
        peg$c332 = "substring",
        peg$c333 = { type: "literal", value: "SUBSTRING", description: "\"SUBSTRING\"" },
        peg$c334 = async function() {return "SUBSTRING"},
        peg$c335 = "substr",
        peg$c336 = { type: "literal", value: "SUBSTR", description: "\"SUBSTR\"" },
        peg$c337 = async function() {return "SUBSTR"},
        peg$c338 = "bif:substring",
        peg$c339 = { type: "literal", value: "bif:SUBSTRING", description: "\"bif:SUBSTRING\"" },
        peg$c340 = async function() {return "bif:SUBSTRING"},
        peg$c341 = "bif:substr",
        peg$c342 = { type: "literal", value: "bif:SUBSTR", description: "\"bif:SUBSTR\"" },
        peg$c343 = async function() {return "bif:SUBSTR"},
        peg$c344 = "replace",
        peg$c345 = { type: "literal", value: "REPLACE", description: "\"REPLACE\"" },
        peg$c346 = async function() {return "REPLACE"},
        peg$c347 = "exists",
        peg$c348 = { type: "literal", value: "EXISTS", description: "\"EXISTS\"" },
        peg$c349 = async function() {return "EXISTS"},
        peg$c350 = async function(SubstringExpression) {return {SubstringExpression:SubstringExpression}},
        peg$c351 = async function(Expression1, Expression2, Expression3) {return {Expression1:Expression1, Expression2:Expression2, Expression3:Expression3}},
        peg$c352 = async function(Expression1, Expression2) {return {Expression1:Expression1, Expression2:Expression2}},
        peg$c353 = async function(SubstringBifExpression) {return {SubstringBifExpression:SubstringBifExpression}},
        peg$c354 = async function(StrReplaceExpression) {return {StrReplaceExpression:StrReplaceExpression}},
        peg$c355 = async function(ExistsFunc) {return {ExistsFunc:ExistsFunc}},
        peg$c356 = async function(Expression) {return{Expression:Expression}},
        peg$c357 = async function(NotExistsFunc) {return {NotExistsFunc:NotExistsFunc}},
        peg$c358 = async function(Comma) {return {Comma:Comma}},
        peg$c359 = async function(Comma) {return {Space:" "}},
        peg$c360 = "@",
        peg$c361 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c362 = async function(LANGTAG_MUL) {return LANGTAG_MUL},
        peg$c363 = async function(Comma, string) {return string},
        peg$c364 = async function(String) {return {String:makeVar(String)}},
        peg$c365 = "<",
        peg$c366 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c367 = /^[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]/,
        peg$c368 = { type: "class", value: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]", description: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]" },
        peg$c369 = "_",
        peg$c370 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c371 = ":",
        peg$c372 = { type: "literal", value: ":", description: "\":\"" },
        peg$c373 = "#",
        peg$c374 = { type: "literal", value: "#", description: "\"#\"" },
        peg$c375 = "%",
        peg$c376 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c377 = /^[0-9]/,
        peg$c378 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c379 = ">",
        peg$c380 = { type: "literal", value: ">", description: "\">\"" },
        peg$c381 = async function(IRIREF) {return {IRIREF:makeVar(IRIREF)}},
        peg$c382 = async function(PrefixedName) {return {PrefixedName:PrefixedName}},
        peg$c383 = async function(Prefix) {return makeVar(Prefix)},
        peg$c384 = async function(ref, PropertyReference, Prefix, LName, Substring, FunctionBETWEEN, FunctionLike) {return {var:{name:makeVar(Prefix)+makeVar(LName), ref:ref, type:await resolveType(makeVar(Prefix)+makeVar(LName)), kind:await resolveKind(makeVar(Prefix)+makeVar(LName)), PropertyReference:PropertyReference},Prefix:Prefix, Name:makeVar(LName), Substring:makeVar(Substring), FunctionBETWEEN:FunctionBETWEEN, FunctionLike:FunctionLike}},
        peg$c385 = async function(Var) {return makeVar(Var)},
        peg$c386 = "`",
        peg$c387 = { type: "literal", value: "`", description: "\"`\"" },
        peg$c388 = async function(iri, ArgList) {return {iri:iri, ArgList:ArgList}},
        peg$c389 = async function(iri) {return {iri:iri}},
        peg$c390 = async function(DISTINCT, ArgListExpression) {return {DISTINCT:DISTINCT, ArgListExpression:ArgListExpression}},
        peg$c391 = async function(ArgListExpression) {return {ArgListExpression:ArgListExpression}},
        peg$c392 = async function() {return "NIL"},
        peg$c393 = async function(NumericLiteral) {return {NumericLiteral:NumericLiteral}},
        peg$c394 = async function(DECIMAL) {return {Number:DECIMAL.join("")}},
        peg$c395 = /^[eE]/,
        peg$c396 = { type: "class", value: "[eE]", description: "[eE]" },
        peg$c397 = /^[+\-]/,
        peg$c398 = { type: "class", value: "[+-]", description: "[+-]" },
        peg$c399 = async function(DOUBLE) {return {Number:makeVar(DOUBLE)}},
        peg$c400 = async function(INTEGER) {return {Number:INTEGER.join("")}},
        peg$c401 = async function(Number) {return {Number:Number.join("")}},
        peg$c402 = async function(Var) {return {VariableName:makeVar(Var)}},
        peg$c403 = "?",
        peg$c404 = { type: "literal", value: "?", description: "\"?\"" },
        peg$c405 = "$",
        peg$c406 = { type: "literal", value: "$", description: "\"$\"" },
        peg$c407 = "'",
        peg$c408 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c409 = "\"",
        peg$c410 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c411 = "\u201C",
        peg$c412 = { type: "literal", value: "\u201C", description: "\"\\u201C\"" },
        peg$c413 = "\u201D",
        peg$c414 = { type: "literal", value: "\u201D", description: "\"\\u201D\"" },
        peg$c415 = async function() {return '"'},
        peg$c416 = async function(Path) {return await pathOrReference(Path)},
        peg$c417 = async function(PathProperty, Substring, FunctionBETWEEN, FunctionLike) {return {PathProperty:PathProperty, Substring:makeVar(Substring), FunctionBETWEEN:FunctionBETWEEN, FunctionLike:FunctionLike}},
        peg$c418 = "[",
        peg$c419 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c420 = "]",
        peg$c421 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c422 = async function(PathAlternative) {return {PathAlternative:PathAlternative}},
        peg$c423 = async function(PathSequence) {return {PathSequence:PathSequence}},
        peg$c424 = async function(PathEltOrInverse) {return {PathEltOrInverse:PathEltOrInverse}},
        peg$c425 = async function(PathElt) {return {inv:"", PathElt:PathElt}},
        peg$c426 = "^",
        peg$c427 = { type: "literal", value: "^", description: "\"^\"" },
        peg$c428 = async function(PathElt) {return {inv:"^", PathElt:PathElt}},
        peg$c429 = "inv",
        peg$c430 = { type: "literal", value: "inv", description: "\"inv\"" },
        peg$c431 = async function(PathPrimary, PathMod) {return {PathPrimary:PathPrimary, PathMod:PathMod}},
        peg$c432 = "a",
        peg$c433 = { type: "literal", value: "a", description: "\"a\"" },
        peg$c434 = async function(PathNegatedPropertySet) {return {PathNegatedPropertySet:PathNegatedPropertySet}},
        peg$c435 = async function(PathOneInPropertySet) {return {PathOneInPropertySet:PathOneInPropertySet}},
        peg$c436 = async function(PathNegatedPropertySetBracketted) {return {PathNegatedPropertySetBracketted:PathNegatedPropertySetBracketted}},
        peg$c437 = async function(iriOra) {return {inv:"", iriOra:iriOra}},
        peg$c438 = async function(iriOra) {return {inv:"^", iriOra:iriOra}},
        peg$c439 = async function(ref, PNAME_NS, LName) {return {var:{name:makeVar(LName), ref:ref,type:await resolveType(makeVar(PNAME_NS)+makeVar(LName)), kind:await resolveKind(makeVar(PNAME_NS)+makeVar(LName))}, Prefix:PNAME_NS}},
        peg$c440 = async function(ref, LName) {return {var:{name:makeVar(LName),ref:ref, type:await resolveType(makeVar(LName)), kind:await resolveKind(makeVar(LName))}}},
        peg$c441 = async function() {return {Alternative:"|"}},
        peg$c442 = async function() {return {PathSymbol :"/"}},
        peg$c443 = " ",
        peg$c444 = { type: "literal", value: " ", description: "\" \"" },
        peg$c445 = async function(Chars_String_variables) {return Chars_String_variables},
        peg$c446 = async function(ref, PropertyReference, LName, PathMod, Substring, FunctionBETWEEN, FunctionLike) {return {var:{name:makeVar(LName), ref:ref, type:await resolveType(makeVar(LName)), kind:await resolveKind(makeVar(LName)), PathMod:PathMod, PropertyReference:PropertyReference},  Substring:makeVar(Substring), FunctionBETWEEN:FunctionBETWEEN, FunctionLike:FunctionLike}},
        peg$c447 = { type: "literal", value: "INV", description: "\"INV\"" },
        peg$c448 = async function(ref, PropertyReference, INV, LName, Substring, FunctionBETWEEN, FunctionLike) {return { var:{INV:INV, name:makeVar(LName), ref:ref, type:await resolveTypeFromSchemaForAttributeAndLink(makeVar(LName)), PropertyReference:PropertyReference}, Substring:makeVar(Substring), FunctionBETWEEN:FunctionBETWEEN, FunctionLike:FunctionLike}},
        peg$c449 = async function(ref, PropertyReference, INV, PNAME_NS, LName, Substring, FunctionBETWEEN, FunctionLike) {return { var:{INV:INV, name:makeVar(LName), ref:ref, type:await resolveTypeFromSchemaForAttributeAndLink(makeVar(PNAME_NS)+makeVar(LName)), PropertyReference:PropertyReference}, Substring:makeVar(Substring), FunctionBETWEEN:FunctionBETWEEN, FunctionLike:FunctionLike}},
        peg$c450 = async function(ref, PropertyReference, INV, LName, Substring, FunctionBETWEEN, FunctionLike) {return { var:{INV:"INV", name:makeVar(LName), ref:ref, type:await resolveTypeFromSchemaForAttributeAndLink(makeVar(LName)), PropertyReference:PropertyReference}, Substring:makeVar(Substring), FunctionBETWEEN:FunctionBETWEEN, FunctionLike:FunctionLike}},
        peg$c451 = async function(LName) {return {var:{name:makeVar(LName), type:await resolveType(makeVar(LName)), kind:await resolveKind(makeVar(LName))}}},
        peg$c452 = "[[",
        peg$c453 = { type: "literal", value: "[[", description: "\"[[\"" },
        peg$c454 = "]]",
        peg$c455 = { type: "literal", value: "]]", description: "\"]]\"" },
        peg$c456 = "!=",
        peg$c457 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c458 = "<>",
        peg$c459 = { type: "literal", value: "<>", description: "\"<>\"" },
        peg$c460 = "<=",
        peg$c461 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c462 = ">=",
        peg$c463 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c464 = async function() {return },
        peg$c465 = /^[\-_.:, \^$\/]/,
        peg$c466 = { type: "class", value: "[-_.:, ^$/]", description: "[-_.:, ^$/]" },
        peg$c467 = async function(string) {return {string: string.join("")}},
        peg$c468 = /^[\-_.:, \^$()!@#%&*+?|\/]/,
        peg$c469 = { type: "class", value: "[-_.:, ^$()!@#%&*+?|/]", description: "[-_.:, ^$()!@#%&*+?|/]" },
        peg$c470 = async function(string) {return string.join("")},
        peg$c471 = "like",
        peg$c472 = { type: "literal", value: "LIKE", description: "\"LIKE\"" },
        peg$c473 = async function(string) {return string},
        peg$c474 = async function(start, string, end) {return {string: makeVar(string), start:start, end:end}},
        peg$c475 = "between",
        peg$c476 = { type: "literal", value: "BETWEEN", description: "\"BETWEEN\"" },
        peg$c477 = async function(BetweenExpressionL, BetweenExpressionR) {return {BetweenExpressionL:BetweenExpressionL, BetweenExpressionR:BetweenExpressionR}},

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    async function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    async function location() {
      return await peg$computeLocation(peg$savedPos, peg$currPos);
    }

    async function expected(description) {
      throw await peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function error(message) {
      throw await peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    async function peg$computeLocation(startPos, endPos) {
      var startPosDetails = await peg$computePosDetails(startPos),
          endPosDetails   = await peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    async function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    async function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    async function peg$parseMain() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseExpression();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExpression() {
      var s0;

      var key    = peg$currPos * 271 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.substr(peg$currPos, 3) === peg$c0) {
        s0 = peg$c0;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c1); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c2) {
          s0 = peg$c2;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c3); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 10) === peg$c4) {
            s0 = peg$c4;
            peg$currPos += 10;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c5); }
          }
          if (s0 === peg$FAILED) {
            s0 = await peg$parseValueScope();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseConditionalOrExpressionA();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseclassExpr();
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueScope() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c7); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseValueScopeA();
        if (s2 === peg$FAILED) {
          s2 = await peg$parseValueScopeB();
          if (s2 === peg$FAILED) {
            s2 = await peg$parseValueScopeC();
          }
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 125) {
            s3 = peg$c8;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c9); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c10(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueScopeA() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseINTEGER();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c11) {
          s2 = peg$c11;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c12); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseINTEGER();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c13(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueScopeC() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseUNDEF();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePrimaryExpression();
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parseComma2();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseUNDEF();
            if (s6 === peg$FAILED) {
              s6 = await peg$parsePrimaryExpression();
            }
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parseComma2();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseUNDEF();
              if (s6 === peg$FAILED) {
                s6 = await peg$parsePrimaryExpression();
              }
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueScopeB() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseScope();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parseComma2();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseScope();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parseComma2();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseScope();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseScope() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 271 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = await peg$parseUNDEF();
          if (s4 === peg$FAILED) {
            s4 = await peg$parsePrimaryExpression();
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = await peg$parseComma2();
            if (s7 !== peg$FAILED) {
              s8 = await peg$parsespace();
              if (s8 !== peg$FAILED) {
                s9 = await peg$parseUNDEF();
                if (s9 === peg$FAILED) {
                  s9 = await peg$parsePrimaryExpression();
                }
                if (s9 !== peg$FAILED) {
                  s7 = [s7, s8, s9];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = await peg$parseComma2();
              if (s7 !== peg$FAILED) {
                s8 = await peg$parsespace();
                if (s8 !== peg$FAILED) {
                  s9 = await peg$parseUNDEF();
                  if (s9 === peg$FAILED) {
                    s9 = await peg$parsePrimaryExpression();
                  }
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c16;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c17); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = await peg$c18(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseclassExpr() {
      var s0, s1;

      var key    = peg$currPos * 271 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c19) {
        s1 = peg$c19;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c20); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s1 = peg$c21;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c22); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 13) === peg$c23) {
            s1 = peg$c23;
            peg$currPos += 13;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c24); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 6) === peg$c25) {
              s1 = peg$c25;
              peg$currPos += 6;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c26); }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c27();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseConditionalOrExpressionA() {
      var s0, s1;

      var key    = peg$currPos * 271 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseConditionalOrExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c28(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseConditionalOrExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 271 + 9,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseConditionalAndExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parsespace();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parseOROriginal();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parsespace();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parseConditionalAndExpression();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parsespace();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parseOROriginal();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parsespace();
              if (s6 !== peg$FAILED) {
                s7 = await peg$parseConditionalAndExpression();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseOROriginal() {
      var s0, s1;

      var key    = peg$currPos * 271 + 10,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c30); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 2).toLowerCase() === peg$c31) {
          s1 = input.substr(peg$currPos, 2);
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c32); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c33(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseConditionalAndExpression() {
      var s0, s1;

      var key    = peg$currPos * 271 + 11,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseValueLogicalA();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c34(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueLogicalA() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 271 + 12,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseValueLogical();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parsespace();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parseANDOriginal();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parsespace();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parseValueLogical();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parsespace();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parseANDOriginal();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parsespace();
              if (s6 !== peg$FAILED) {
                s7 = await peg$parseValueLogical();
                if (s7 !== peg$FAILED) {
                  s4 = [s4, s5, s6, s7];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseANDOriginal() {
      var s0, s1;

      var key    = peg$currPos * 271 + 13,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c35) {
        s1 = peg$c35;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c36); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c37) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c38); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c39(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseValueLogical() {
      var s0, s1;

      var key    = peg$currPos * 271 + 14,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseRelationalExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c40(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpression() {
      var s0;

      var key    = peg$currPos * 271 + 15,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseRelationalExpressionC();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseRelationalExpressionC1();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseRelationalExpressionB1();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseRelationalExpressionB2();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseRelationalExpressionB();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseRelationalExpressionA();
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionA() {
      var s0, s1;

      var key    = peg$currPos * 271 + 16,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNumericExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c41(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 17,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNumericExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseRelation();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseNumericExpression();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c42(s1, s4, s6);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionB1() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 18,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseclassExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseRelation();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseNumericExpression();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c43(s1, s4, s6);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionB2() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 19,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNumericExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseRelation();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseclassExpr();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c44(s1, s4, s6);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionC() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 20,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNumericExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseIN();
          if (s4 === peg$FAILED) {
            s4 = await peg$parseNOTIN();
          }
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseExpressionList2();
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c45(s1, s4, s6);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelationalExpressionC1() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 21,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNumericExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseIN();
          if (s4 === peg$FAILED) {
            s4 = await peg$parseNOTIN();
          }
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseExpressionList3();
              if (s6 === peg$FAILED) {
                s6 = await peg$parseExpressionList4();
              }
              if (s6 !== peg$FAILED) {
                s3 = [s3, s4, s5, s6];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c45(s1, s4, s6);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIN() {
      var s0, s1;

      var key    = peg$currPos * 271 + 22,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c46) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c47); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c48();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNOT() {
      var s0, s1;

      var key    = peg$currPos * 271 + 23,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c49) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c50); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c51();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNOTIN() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 271 + 24,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parseNOT();
      if (s2 !== peg$FAILED) {
        s3 = await peg$parsespaceObl();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseIN();
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c52(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNumericExpression() {
      var s0, s1;

      var key    = peg$currPos * 271 + 25,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseAdditiveExpression();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c53(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAdditiveExpression() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 26,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseMultiplicativeExpression();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseMultiplicativeExpressionListA();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c54(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMultiplicativeExpressionListA() {
      var s0, s1;

      var key    = peg$currPos * 271 + 27,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      s1 = await peg$parseMultiplicativeExpressionList();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = await peg$parseMultiplicativeExpressionList();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMultiplicativeExpressionList() {
      var s0;

      var key    = peg$currPos * 271 + 28,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseConcat();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseAdditive();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseNumericLiteralPositive();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseNumericLiteralNegative();
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseConcat() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 271 + 29,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c55) {
          s2 = peg$c55;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c56); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseMultiplicativeExpression();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = await peg$c57(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAdditive() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 271 + 30,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 43) {
          s2 = peg$c58;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c59); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c60;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c61); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseMultiplicativeExpression();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = await peg$c62(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMultiplicativeExpression() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 271 + 31,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseUnaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseUnaryExpressionListA();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c63(s1, s4);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpression() {
      var s0;

      var key    = peg$currPos * 271 + 32,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseUnaryExpressionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseUnaryExpressionB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpressionA() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 271 + 33,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 33) {
          s2 = peg$c64;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c65); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s2 = peg$c60;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c61); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsePrimaryExpression();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = await peg$c66(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpressionB() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 34,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePrimaryExpression();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c67(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpressionListA() {
      var s0, s1;

      var key    = peg$currPos * 271 + 35,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      s1 = await peg$parseUnaryExpressionList();
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = await peg$parseUnaryExpressionList();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUnaryExpressionList() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 271 + 36,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s2 = peg$c68;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c69); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 47) {
            s2 = peg$c70;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c71); }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseUnaryExpression();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = await peg$c72(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePrimaryExpression() {
      var s0;

      var key    = peg$currPos * 271 + 37,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseBooleanLiteral();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseBuiltInCall();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseQName();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseiriOrFunction();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseRDFLiteral();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseBrackettedExpression();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseNumericLiteral();
                  if (s0 === peg$FAILED) {
                    s0 = await peg$parseVar();
                    if (s0 === peg$FAILED) {
                      s0 = await peg$parseDoubleSquareBracketName();
                      if (s0 === peg$FAILED) {
                        s0 = await peg$parseLN();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePrimaryExpression2() {
      var s0;

      var key    = peg$currPos * 271 + 38,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseBooleanLiteral();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseiriOrFunction();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseBuiltInCall2();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseRDFLiteral();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseBrackettedExpression();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseNumericLiteral();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseVar();
                  if (s0 === peg$FAILED) {
                    s0 = await peg$parseDoubleSquareBracketName();
                    if (s0 === peg$FAILED) {
                      s0 = await peg$parseQName();
                      if (s0 === peg$FAILED) {
                        s0 = await peg$parseLN();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBooleanLiteral() {
      var s0, s1;

      var key    = peg$currPos * 271 + 39,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseTRUE();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseFALSE();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c73(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseTRUE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 40,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c74) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c75); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c76();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFALSE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 41,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c77) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c78); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c79();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRDFLiteral() {
      var s0, s1;

      var key    = peg$currPos * 271 + 42,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseRDFLiteralA();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseRDFLiteralB();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseRDFLiteralC();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c80(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRDFLiteralA() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 43,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseStringQuotes();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseLANGTAG();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c81(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRDFLiteralB() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 44,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseStringQuotes();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c82) {
          s2 = peg$c82;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c83); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseiri();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c84(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBrackettedExpression() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 271 + 45,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c16;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c17); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = await peg$c85(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBuiltInCall() {
      var s0;

      var key    = peg$currPos * 271 + 46,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseAggregate();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseFunctionExpression();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseRegexExpression();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseSubstringExpression();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseSubstringBifExpression();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseStrReplaceExpression();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseExistsFunc();
                  if (s0 === peg$FAILED) {
                    s0 = await peg$parseNotExistsFunc();
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBuiltInCall2() {
      var s0;

      var key    = peg$currPos * 271 + 47,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseAggregate();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseRegexExpression();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseSubstringExpression();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseSubstringBifExpression();
            if (s0 === peg$FAILED) {
              s0 = await peg$parseStrReplaceExpression();
              if (s0 === peg$FAILED) {
                s0 = await peg$parseExistsFunc();
                if (s0 === peg$FAILED) {
                  s0 = await peg$parseNotExistsFunc();
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregate() {
      var s0, s1;

      var key    = peg$currPos * 271 + 48,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseAggregateAO();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseAggregateA();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseAggregateB();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseAggregateC();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseAggregateD();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseAggregateE();
                if (s1 === peg$FAILED) {
                  s1 = await peg$parseAggregateF();
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c86(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateAO() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 49,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCOUNT_DISTINCT();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c87(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateA() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 271 + 50,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCOUNT();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSUM();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseMIN();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseMAX();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseAVG();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseSAMPLE();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseDISTINCT();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespaceObl();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c16;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = await peg$c88(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateB() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 51,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCOUNT();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSUM();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseMIN();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseMAX();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseAVG();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseSAMPLE();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c89(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 271 + 52,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseGROUP_CONCAT();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseDISTINCT();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespaceObl();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseSEPARATOR();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c16;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = await peg$c90(s1, s3, s5, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateD() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 271 + 53,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseGROUP_CONCAT();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseSEPARATOR();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c16;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = await peg$c91(s1, s4, s6);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateE() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 271 + 54,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseGROUP_CONCAT();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseDISTINCT();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespaceObl();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c16;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = await peg$c88(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAggregateF() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 55,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseGROUP_CONCAT();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c89(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCOUNT_DISTINCT() {
      var s0, s1;

      var key    = peg$currPos * 271 + 56,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c92) {
        s1 = input.substr(peg$currPos, 14);
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c93); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c94();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDISTINCT() {
      var s0, s1;

      var key    = peg$currPos * 271 + 57,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c95) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c96); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c97();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCOUNT() {
      var s0, s1;

      var key    = peg$currPos * 271 + 58,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c98) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c99); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c100();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSUM() {
      var s0, s1;

      var key    = peg$currPos * 271 + 59,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c101) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c102); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c103();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMIN() {
      var s0, s1;

      var key    = peg$currPos * 271 + 60,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c104) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c105); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c106();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMAX() {
      var s0, s1;

      var key    = peg$currPos * 271 + 61,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c107) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c108); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c109();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAVG() {
      var s0, s1;

      var key    = peg$currPos * 271 + 62,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c110) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c111); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c112();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSAMPLE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 63,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c113) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c114); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c115();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseGROUP_CONCAT() {
      var s0, s1;

      var key    = peg$currPos * 271 + 64,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c116) {
        s1 = input.substr(peg$currPos, 12);
        peg$currPos += 12;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c117); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c118();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSEPARATORTer() {
      var s0, s1;

      var key    = peg$currPos * 271 + 65,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c119) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c120); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c121();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSEPARATOR() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 66,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 59) {
        s1 = peg$c122;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c123); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseSEPARATORTer();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s5 = peg$c124;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c125); }
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseStringQuotes();
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s1 = peg$c126;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c127); }
        }
        if (s1 !== peg$FAILED) {
          s2 = await peg$parsespace();
          if (s2 !== peg$FAILED) {
            s3 = await peg$parseStringQuotes();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = await peg$c128(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpression() {
      var s0, s1;

      var key    = peg$currPos * 271 + 67,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseFunctionExpressionC();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseFunctionExpressionA();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseFunctionExpressionB();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseIFFunction();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseFunctionExpressionD();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseFunctionExpressionLANGMATCHES();
                if (s1 === peg$FAILED) {
                  s1 = await peg$parseFunctionCOALESCE();
                  if (s1 === peg$FAILED) {
                    s1 = await peg$parseBOUNDFunction();
                    if (s1 === peg$FAILED) {
                      s1 = await peg$parseNilFunction();
                      if (s1 === peg$FAILED) {
                        s1 = await peg$parseBNODEFunction();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c129(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUNDEF() {
      var s0, s1;

      var key    = peg$currPos * 271 + 68,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c130) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c131); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c132();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTR() {
      var s0, s1;

      var key    = peg$currPos * 271 + 69,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c133) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c134); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c135();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANG() {
      var s0, s1;

      var key    = peg$currPos * 271 + 70,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c136) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c137); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c138();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDATATYPE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 71,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c139) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c140); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c141();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIRI() {
      var s0, s1;

      var key    = peg$currPos * 271 + 72,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c142) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c143); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c144();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseURI() {
      var s0, s1;

      var key    = peg$currPos * 271 + 73,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c145) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c146); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c147();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseABS() {
      var s0, s1;

      var key    = peg$currPos * 271 + 74,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c149); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c150();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCEIL() {
      var s0, s1;

      var key    = peg$currPos * 271 + 75,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c151) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c152); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c153();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFLOOR() {
      var s0, s1;

      var key    = peg$currPos * 271 + 76,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c154) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c155); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c156();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseROUND() {
      var s0, s1;

      var key    = peg$currPos * 271 + 77,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c157) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c158); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c159();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRLEN() {
      var s0, s1;

      var key    = peg$currPos * 271 + 78,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c160) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c161); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c162();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUCASE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 79,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c163) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c164); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c165();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLCASE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 80,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c166) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c167); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c168();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseENCODE_FOR_URI() {
      var s0, s1;

      var key    = peg$currPos * 271 + 81,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c169) {
        s1 = input.substr(peg$currPos, 14);
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c170); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c171();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseYEAR() {
      var s0, s1;

      var key    = peg$currPos * 271 + 82,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c172) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c173); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c174();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMONTH() {
      var s0, s1;

      var key    = peg$currPos * 271 + 83,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c175) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c176); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c177();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDAY() {
      var s0, s1;

      var key    = peg$currPos * 271 + 84,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c178) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c179); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c180();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseTIMEZONE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 85,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c181) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c182); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c183();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseTZ() {
      var s0, s1;

      var key    = peg$currPos * 271 + 86,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c184) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c185); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c186();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMD5() {
      var s0, s1;

      var key    = peg$currPos * 271 + 87,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c187) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c188); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c189();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA1() {
      var s0, s1;

      var key    = peg$currPos * 271 + 88,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c190) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c191); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c192();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA256() {
      var s0, s1;

      var key    = peg$currPos * 271 + 89,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c193) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c194); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c195();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA384() {
      var s0, s1;

      var key    = peg$currPos * 271 + 90,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c196) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c197); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c198();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSHA512() {
      var s0, s1;

      var key    = peg$currPos * 271 + 91,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c199) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c200); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c201();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisIRI() {
      var s0, s1;

      var key    = peg$currPos * 271 + 92,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c202) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c203); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c204();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisURI() {
      var s0, s1;

      var key    = peg$currPos * 271 + 93,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c205) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c206); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c207();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisBLANK() {
      var s0, s1;

      var key    = peg$currPos * 271 + 94,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c208) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c209); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c210();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedateTime() {
      var s0, s1;

      var key    = peg$currPos * 271 + 95,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c211) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c212); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c213();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedate() {
      var s0, s1;

      var key    = peg$currPos * 271 + 96,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c214) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c215); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c216();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisLITERAL() {
      var s0, s1;

      var key    = peg$currPos * 271 + 97,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c217) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c218); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c219();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseisNUMERIC() {
      var s0, s1;

      var key    = peg$currPos * 271 + 98,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c220) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c221); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c222();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANGMATCHES() {
      var s0, s1;

      var key    = peg$currPos * 271 + 99,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11).toLowerCase() === peg$c223) {
        s1 = input.substr(peg$currPos, 11);
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c224); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c225();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCONTAINS() {
      var s0, s1;

      var key    = peg$currPos * 271 + 100,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c226) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c227); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c228();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRSTARTS() {
      var s0, s1;

      var key    = peg$currPos * 271 + 101,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c229) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c230); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c231();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRENDS() {
      var s0, s1;

      var key    = peg$currPos * 271 + 102,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c232) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c233); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c234();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRBEFORE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 103,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c235) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c236); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c237();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRAFTER() {
      var s0, s1;

      var key    = peg$currPos * 271 + 104,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c238) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c239); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c240();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRLANG() {
      var s0, s1;

      var key    = peg$currPos * 271 + 105,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c241) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c242); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c243();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRDT() {
      var s0, s1;

      var key    = peg$currPos * 271 + 106,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c244) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c245); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c246();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesameTerm() {
      var s0, s1;

      var key    = peg$currPos * 271 + 107,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c247) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c248); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c249();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedays() {
      var s0, s1;

      var key    = peg$currPos * 271 + 108,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c250) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c251); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c252();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseyears() {
      var s0, s1;

      var key    = peg$currPos * 271 + 109,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c253) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c254); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c255();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsemonths() {
      var s0, s1;

      var key    = peg$currPos * 271 + 110,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c256) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c257); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c258();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseHOURS2() {
      var s0, s1;

      var key    = peg$currPos * 271 + 111,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c259) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c260); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c261();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsehours() {
      var s0, s1;

      var key    = peg$currPos * 271 + 112,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c259) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c260); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c262();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseminutes() {
      var s0, s1;

      var key    = peg$currPos * 271 + 113,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c263) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c264); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c265();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMINUTES2() {
      var s0, s1;

      var key    = peg$currPos * 271 + 114,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c263) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c264); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c266();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseseconds() {
      var s0, s1;

      var key    = peg$currPos * 271 + 115,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c267) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c268); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c269();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSECONDS2() {
      var s0, s1;

      var key    = peg$currPos * 271 + 116,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c267) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c268); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c270();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIF() {
      var s0, s1;

      var key    = peg$currPos * 271 + 117,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c271) {
        s1 = input.substr(peg$currPos, 2);
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c272); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c273();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCOALESCE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 118,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c274) {
        s1 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c275); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c276();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBOUND() {
      var s0, s1;

      var key    = peg$currPos * 271 + 119,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c277) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c278); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c279();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBNODE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 120,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c280) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c281); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c282();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRAND() {
      var s0, s1;

      var key    = peg$currPos * 271 + 121,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c283) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c284); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c285();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseCONCAT() {
      var s0, s1;

      var key    = peg$currPos * 271 + 122,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c286) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c287); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c288();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNOW() {
      var s0, s1;

      var key    = peg$currPos * 271 + 123,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c289) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c290); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c291();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseUUID() {
      var s0, s1;

      var key    = peg$currPos * 271 + 124,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c292) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c293); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c294();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRUUID() {
      var s0, s1;

      var key    = peg$currPos * 271 + 125,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c295) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c296); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c297();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 126,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSTR();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseLANG();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseDATATYPE();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseIRI();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseURI();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseABS();
                if (s1 === peg$FAILED) {
                  s1 = await peg$parseCEIL();
                  if (s1 === peg$FAILED) {
                    s1 = await peg$parseFLOOR();
                    if (s1 === peg$FAILED) {
                      s1 = await peg$parseROUND();
                      if (s1 === peg$FAILED) {
                        s1 = await peg$parseSTRLEN();
                        if (s1 === peg$FAILED) {
                          s1 = await peg$parseUCASE();
                          if (s1 === peg$FAILED) {
                            s1 = await peg$parseLCASE();
                            if (s1 === peg$FAILED) {
                              s1 = await peg$parseENCODE_FOR_URI();
                              if (s1 === peg$FAILED) {
                                s1 = await peg$parseYEAR();
                                if (s1 === peg$FAILED) {
                                  s1 = await peg$parseMONTH();
                                  if (s1 === peg$FAILED) {
                                    s1 = await peg$parseDAY();
                                    if (s1 === peg$FAILED) {
                                      s1 = await peg$parseHOURS2();
                                      if (s1 === peg$FAILED) {
                                        s1 = await peg$parseMINUTES2();
                                        if (s1 === peg$FAILED) {
                                          s1 = await peg$parseSECONDS2();
                                          if (s1 === peg$FAILED) {
                                            s1 = await peg$parseTIMEZONE();
                                            if (s1 === peg$FAILED) {
                                              s1 = await peg$parseTZ();
                                              if (s1 === peg$FAILED) {
                                                s1 = await peg$parseMD5();
                                                if (s1 === peg$FAILED) {
                                                  s1 = await peg$parseSHA1();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = await peg$parseSHA256();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = await peg$parseSHA384();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = await peg$parseSHA512();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = await peg$parseisIRI();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = await peg$parseisURI();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = await peg$parseisBLANK();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = await peg$parsedateTime();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = await peg$parsedate();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = await peg$parseisLITERAL();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = await peg$parseisNUMERIC();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c298(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 271 + 127,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseLANGMATCHES();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseCONTAINS();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseSTRSTARTS();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseSTRENDS();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseSTRBEFORE();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseSTRAFTER();
                if (s1 === peg$FAILED) {
                  s1 = await peg$parseSTRLANG();
                  if (s1 === peg$FAILED) {
                    s1 = await peg$parseSTRDT();
                    if (s1 === peg$FAILED) {
                      s1 = await peg$parsesameTerm();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s6 = peg$c126;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c16;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = await peg$c299(s1, s4, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionC() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 271 + 128,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedays();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseyears();
        if (s1 === peg$FAILED) {
          s1 = await peg$parsemonths();
          if (s1 === peg$FAILED) {
            s1 = await peg$parsehours();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseminutes();
              if (s1 === peg$FAILED) {
                s1 = await peg$parseseconds();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsePrimaryExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s6 = peg$c60;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c61); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsePrimaryExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c16;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = await peg$c300(s1, s4, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionD() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 129,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseCOALESCE();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseCONCAT();
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseExpressionList2();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c301(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionCOALESCE() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 271 + 130,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePrimaryExpression2();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c302) {
            s3 = peg$c302;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c303); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsePrimaryExpression2();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = await peg$c304(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionLANGMATCHES() {
      var s0;

      var key    = peg$currPos * 271 + 131,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseFunctionExpressionLANGMATCHESA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseFunctionExpressionLANGMATCHESB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionLANGMATCHESA() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 132,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePrefixedName();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseQName();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseLN();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseLANGTAG_MUL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c305(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseFunctionExpressionLANGMATCHESB() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 133,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePrefixedName();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseQName();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseLN();
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseLANGTAG();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c306(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBOUNDFunction() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 134,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseBOUND();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsePrimaryExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c307(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNilFunction() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 135,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseRAND();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseNOW();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseUUID();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseSTRUUID();
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseNIL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c308(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBNODEFunction() {
      var s0;

      var key    = peg$currPos * 271 + 136,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseBNODEFunctionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseBNODEFunctionB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBNODEFunctionA() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 137,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseBNODE();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c298(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBNODEFunctionB() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 138,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseBNODE();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseNIL();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c308(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIFFunction() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      var key    = peg$currPos * 271 + 139,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseIF();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s6 = peg$c126;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s10 = peg$c126;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parsespace();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parseExpression();
                            if (s12 !== peg$FAILED) {
                              s13 = await peg$parsespace();
                              if (s13 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                  s14 = peg$c16;
                                  peg$currPos++;
                                } else {
                                  s14 = peg$FAILED;
                                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                                }
                                if (s14 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s1 = await peg$c309(s1, s4, s8, s12);
                                  s0 = s1;
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseHASMAX() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 140,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c310) {
        s1 = peg$c310;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c311); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseSpecialExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c312(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseHASRANK() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 141,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7) === peg$c313) {
        s1 = peg$c313;
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c314); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseSpecialExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c315(s1, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSpecialExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;

      var key    = peg$currPos * 271 + 142,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePrimaryExpression();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c316) {
            s3 = peg$c316;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c317); }
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 124) {
                s6 = peg$c318;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c319); }
              }
              if (s6 !== peg$FAILED) {
                s7 = await peg$parsespace();
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 6) === peg$c320) {
                    s8 = peg$c320;
                    peg$currPos += 6;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c321); }
                  }
                  if (s8 === peg$FAILED) {
                    s8 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c322) {
                      s9 = peg$c322;
                      peg$currPos += 3;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c323); }
                    }
                    if (s9 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c324) {
                        s9 = peg$c324;
                        peg$currPos += 2;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c325); }
                      }
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = await peg$parsespace();
                      if (s10 !== peg$FAILED) {
                        s11 = await peg$parseExpression();
                        if (s11 !== peg$FAILED) {
                          s9 = [s9, s10, s11];
                          s8 = s9;
                        } else {
                          peg$currPos = s8;
                          s8 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s8;
                        s8 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s8;
                      s8 = peg$FAILED;
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$currPos;
                    s10 = await peg$parsespace();
                    if (s10 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 124) {
                        s11 = peg$c318;
                        peg$currPos++;
                      } else {
                        s11 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c319); }
                      }
                      if (s11 !== peg$FAILED) {
                        s12 = await peg$parsespace();
                        if (s12 !== peg$FAILED) {
                          if (input.substr(peg$currPos, 5) === peg$c326) {
                            s13 = peg$c326;
                            peg$currPos += 5;
                          } else {
                            s13 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c327); }
                          }
                          if (s13 !== peg$FAILED) {
                            s14 = await peg$parsespace();
                            if (s14 !== peg$FAILED) {
                              s15 = await peg$parseExpression();
                              if (s15 !== peg$FAILED) {
                                s10 = [s10, s11, s12, s13, s14, s15];
                                s9 = s10;
                              } else {
                                peg$currPos = s9;
                                s9 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s9;
                              s9 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s9;
                      s9 = peg$FAILED;
                    }
                    if (s9 === peg$FAILED) {
                      s9 = null;
                    }
                    if (s9 !== peg$FAILED) {
                      s5 = [s5, s6, s7, s8, s9];
                      s4 = s5;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRegexExpression() {
      var s0, s1;

      var key    = peg$currPos * 271 + 143,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseRegexExpressionA();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseRegexExpressionB();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c328(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRegexExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      var key    = peg$currPos * 271 + 144,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREGEX();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseComma();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$currPos;
                      s10 = await peg$parseComma();
                      if (s10 !== peg$FAILED) {
                        s11 = await peg$parsespace();
                        if (s11 !== peg$FAILED) {
                          s12 = await peg$parseExpression();
                          if (s12 !== peg$FAILED) {
                            s10 = [s10, s11, s12];
                            s9 = s10;
                          } else {
                            peg$currPos = s9;
                            s9 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s9;
                          s9 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s9;
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parsespace();
                        if (s10 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s11 = peg$c16;
                            peg$currPos++;
                          } else {
                            s11 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                          }
                          if (s11 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRegexExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 271 + 145,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREGEX();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseComma();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c16;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s10 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseREGEX() {
      var s0, s1;

      var key    = peg$currPos * 271 + 146,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c329) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c330); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c331();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSUBSTRING() {
      var s0, s1;

      var key    = peg$currPos * 271 + 147,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c332) {
        s1 = input.substr(peg$currPos, 9);
        peg$currPos += 9;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c333); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c334();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSUBSTR() {
      var s0, s1;

      var key    = peg$currPos * 271 + 148,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c335) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c336); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c337();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsebifSUBSTRING() {
      var s0, s1;

      var key    = peg$currPos * 271 + 149,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c338) {
        s1 = input.substr(peg$currPos, 13);
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c339); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c340();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsebifSUBSTR() {
      var s0, s1;

      var key    = peg$currPos * 271 + 150,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c341) {
        s1 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c342); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c343();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseREPLACE() {
      var s0, s1;

      var key    = peg$currPos * 271 + 151,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c344) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c345); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c346();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseEXISTS() {
      var s0, s1;

      var key    = peg$currPos * 271 + 152,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c347) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c348); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c349();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringExpression() {
      var s0, s1;

      var key    = peg$currPos * 271 + 153,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSubstringExpressionA();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSubstringExpressionB();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c350(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 271 + 154,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSUBSTRING();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSUBSTR();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s6 = peg$c126;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c126;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parsespace();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parseExpression();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsespace();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c16;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                              }
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = await peg$c351(s4, s8, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 271 + 155,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSUBSTRING();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSUBSTR();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s6 = peg$c126;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c16;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = await peg$c352(s4, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringBifExpression() {
      var s0, s1;

      var key    = peg$currPos * 271 + 156,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseSubstringBifExpressionA();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseSubstringBifExpressionB();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c353(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringBifExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 271 + 157,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebifSUBSTRING();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsebifSUBSTR();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s6 = peg$c126;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c126;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parsespace();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parseExpression();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsespace();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c16;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                              }
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = await peg$c351(s4, s8, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstringBifExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 271 + 158,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsebifSUBSTRING();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsebifSUBSTR();
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s6 = peg$c126;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c16;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = await peg$c352(s4, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseStrReplaceExpression() {
      var s0, s1;

      var key    = peg$currPos * 271 + 159,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseStrReplaceExpressionA();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseStrReplaceExpressionB();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c354(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseStrReplaceExpressionA() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      var key    = peg$currPos * 271 + 160,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREPLACE();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s6 = peg$c126;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 44) {
                        s9 = peg$c126;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parsespace();
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parseExpression();
                          if (s11 !== peg$FAILED) {
                            s12 = await peg$parsespace();
                            if (s12 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 41) {
                                s13 = peg$c16;
                                peg$currPos++;
                              } else {
                                s13 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                              }
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = await peg$c351(s4, s8, s11);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseStrReplaceExpressionB() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 271 + 161,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseREPLACE();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseExpression();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s6 = peg$c126;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c127); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseExpression();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c16;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = await peg$c352(s4, s8);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExistsFunc() {
      var s0, s1;

      var key    = peg$currPos * 271 + 162,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseExistsFuncA1();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseExistsFuncA();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseExistsFuncB();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c355(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExistsFuncA1() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 163,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseEXISTS();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c14;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c15); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c356(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExistsFuncA() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 164,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseEXISTS();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespaceObl();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c356(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExistsFuncB() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 271 + 165,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c7); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 125) {
                s5 = peg$c8;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c9); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = await peg$c356(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFunc() {
      var s0, s1;

      var key    = peg$currPos * 271 + 166,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNotExistsFuncA();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseNotExistsFuncB1();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseNotExistsFuncB();
          if (s1 === peg$FAILED) {
            s1 = await peg$parseNotExistsFuncC1();
            if (s1 === peg$FAILED) {
              s1 = await peg$parseNotExistsFuncC();
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c357(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncA() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 271 + 167,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 123) {
            s3 = peg$c6;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c7); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s7 = peg$c8;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c9); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = await peg$c356(s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncB() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 271 + 168,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespaceObl();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseEXISTS();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespaceObl();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = await peg$c356(s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncB1() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 271 + 169,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespaceObl();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseEXISTS();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 40) {
                s5 = peg$c14;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c15); }
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseExpression();
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s8 = peg$c16;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = await peg$c356(s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncC() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 170,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespaceObl();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c356(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNotExistsFuncC1() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 171,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNOT();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c14;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c15); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseExpression();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c356(s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExpressionList2() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 271 + 172,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseNIL();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
          s1 = peg$c14;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s1 !== peg$FAILED) {
          s2 = await peg$parsespace();
          if (s2 !== peg$FAILED) {
            s3 = await peg$parseExpression();
            if (s3 !== peg$FAILED) {
              s4 = await peg$parsespace();
              if (s4 !== peg$FAILED) {
                s5 = [];
                s6 = peg$currPos;
                s7 = await peg$parseComma();
                if (s7 !== peg$FAILED) {
                  s8 = await peg$parsespace();
                  if (s8 !== peg$FAILED) {
                    s9 = await peg$parseExpression();
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                while (s6 !== peg$FAILED) {
                  s5.push(s6);
                  s6 = peg$currPos;
                  s7 = await peg$parseComma();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsespace();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseExpression();
                      if (s9 !== peg$FAILED) {
                        s7 = [s7, s8, s9];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                }
                if (s5 !== peg$FAILED) {
                  s6 = await peg$parsespace();
                  if (s6 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s7 = peg$c16;
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                    }
                    if (s7 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5, s6, s7];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExpressionList3() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 271 + 173,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c7); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseExpression();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = await peg$parseComma();
              if (s7 !== peg$FAILED) {
                s8 = await peg$parsespace();
                if (s8 !== peg$FAILED) {
                  s9 = await peg$parseExpression();
                  if (s9 !== peg$FAILED) {
                    s7 = [s7, s8, s9];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = await peg$parseComma();
                if (s7 !== peg$FAILED) {
                  s8 = await peg$parsespace();
                  if (s8 !== peg$FAILED) {
                    s9 = await peg$parseExpression();
                    if (s9 !== peg$FAILED) {
                      s7 = [s7, s8, s9];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s7 = peg$c8;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c9); }
                  }
                  if (s7 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExpressionList4() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 271 + 174,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        s1 = peg$c6;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c7); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseINTEGER();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c11) {
                s5 = peg$c11;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c12); }
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseINTEGER();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsespace();
                    if (s8 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s9 = peg$c8;
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c9); }
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = await peg$c13(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseComma() {
      var s0, s1;

      var key    = peg$currPos * 271 + 175,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c126;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c127); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c358(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseComma2() {
      var s0, s1;

      var key    = peg$currPos * 271 + 176,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 44) {
        s1 = peg$c126;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c127); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c359(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANGTAG() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 177,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c360;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c361); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsestring();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANGTAG_MUL() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 178,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c360;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c361); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = await peg$parsestring2();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = await peg$parseLANGTAG_LIST();
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = await peg$parseLANGTAG_LIST();
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c17); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = await peg$c362(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLANGTAG_LIST() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 179,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseComma();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsestring2();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c363(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRDFLiteralC() {
      var s0, s1;

      var key    = peg$currPos * 271 + 180,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseStringQuotes();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c364(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiri() {
      var s0;

      var key    = peg$currPos * 271 + 181,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseIRIREF();
      if (s0 === peg$FAILED) {
        s0 = await peg$parsePrefixedName();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseIRIREF() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 271 + 182,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s2 = peg$c365;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c366); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$c367.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c368); }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s4 = peg$c369;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c370); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c371;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c372); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s4 = peg$c21;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c22); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 35) {
                  s4 = peg$c373;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c374); }
                }
                if (s4 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s4 = peg$c70;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c71); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s4 = peg$c60;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c61); }
                    }
                    if (s4 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s4 = peg$c14;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                      }
                      if (s4 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s4 = peg$c16;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s4 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 37) {
                            s4 = peg$c375;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c376); }
                          }
                          if (s4 === peg$FAILED) {
                            if (peg$c377.test(input.charAt(peg$currPos))) {
                              s4 = input.charAt(peg$currPos);
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c369;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c370); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c371;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c372); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s4 = peg$c21;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c22); }
                }
                if (s4 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 35) {
                    s4 = peg$c373;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c374); }
                  }
                  if (s4 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                      s4 = peg$c70;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c71); }
                    }
                    if (s4 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 45) {
                        s4 = peg$c60;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c61); }
                      }
                      if (s4 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 40) {
                          s4 = peg$c14;
                          peg$currPos++;
                        } else {
                          s4 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                        }
                        if (s4 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 41) {
                            s4 = peg$c16;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                          }
                          if (s4 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 37) {
                              s4 = peg$c375;
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { await peg$fail(peg$c376); }
                            }
                            if (s4 === peg$FAILED) {
                              if (peg$c377.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                              } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 62) {
            s4 = peg$c379;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c380); }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c381(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePrefixedName() {
      var s0, s1;

      var key    = peg$currPos * 271 + 183,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePNAME_LN();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c382(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_NS() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 184,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parseChars_String_prefix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c371;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c372); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c383(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_LN() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 271 + 185,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c360;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c361); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePropertyReference();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsePNAME_NS();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseChars_String_variables();
            if (s4 === peg$FAILED) {
              s4 = await peg$parseChars_String_prefix();
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseSubstring();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseBetweenExpression();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseLikeExpression();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = await peg$c384(s1, s2, s3, s4, s5, s7, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePN_LOCAL() {
      var s0, s1;

      var key    = peg$currPos * 271 + 186,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseChars_String();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c385(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePropertyReference() {
      var s0, s1;

      var key    = peg$currPos * 271 + 187,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 96) {
        s1 = peg$c386;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c387); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c76();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiriOrFunction() {
      var s0;

      var key    = peg$currPos * 271 + 188,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseiriOrFunctionA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseiriOrFunctionB();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiriOrFunctionA() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 189,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseiri();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseArgList();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c388(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiriOrFunctionB() {
      var s0, s1;

      var key    = peg$currPos * 271 + 190,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseiri();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c389(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseArgList() {
      var s0;

      var key    = peg$currPos * 271 + 191,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseArgListA();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseArgListB();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseNIL();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseArgListA() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 271 + 192,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseDISTINCT();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespaceObl();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseArgListExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c16;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = await peg$c390(s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseArgListB() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 271 + 193,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseArgListExpression();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c16;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c17); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = await peg$c391(s3);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNIL() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 194,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s3 = peg$c16;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c17); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c392();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseArgListExpression() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 195,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseExpression();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parseComma();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseExpression();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parseComma();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parsespace();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parseExpression();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNumericLiteral() {
      var s0, s1;

      var key    = peg$currPos * 271 + 196,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseNumericLiteralUnsigned();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseNumericLiteralPositive();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseNumericLiteralNegative();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c393(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNumericLiteralUnsigned() {
      var s0;

      var key    = peg$currPos * 271 + 197,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseDOUBLE();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseDECIMAL();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseINTEGER();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNumericLiteralPositive() {
      var s0;

      var key    = peg$currPos * 271 + 198,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseDECIMAL_POSITIVE();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseDOUBLE_POSITIVE();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseINTEGER_POSITIVE();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseNumericLiteralNegative() {
      var s0;

      var key    = peg$currPos * 271 + 199,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseDECIMAL_NEGATIVE();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseDOUBLE_NEGATIVE();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseINTEGER_NEGATIVE();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDECIMAL() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 271 + 200,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c377.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c378); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$c377.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c378); }
        }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c21;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c22); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c377.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c378); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c394(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDOUBLE() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 271 + 201,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c377.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c378); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c377.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c378); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c21;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c22); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c377.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c378); }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c377.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c378); }
            }
          }
          if (s4 !== peg$FAILED) {
            if (peg$c395.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c396); }
            }
            if (s5 !== peg$FAILED) {
              if (peg$c397.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c398); }
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              if (s6 !== peg$FAILED) {
                s7 = [];
                if (peg$c377.test(input.charAt(peg$currPos))) {
                  s8 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                }
                if (s8 !== peg$FAILED) {
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    if (peg$c377.test(input.charAt(peg$currPos))) {
                      s8 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                    }
                  }
                } else {
                  s7 = peg$FAILED;
                }
                if (s7 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c22); }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c377.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c378); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (peg$c395.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c396); }
            }
            if (s4 !== peg$FAILED) {
              if (peg$c397.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c398); }
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = [];
                if (peg$c377.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                }
                if (s7 !== peg$FAILED) {
                  while (s7 !== peg$FAILED) {
                    s6.push(s7);
                    if (peg$c377.test(input.charAt(peg$currPos))) {
                      s7 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                    }
                  }
                } else {
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
        if (s1 === peg$FAILED) {
          s1 = peg$currPos;
          s2 = [];
          if (peg$c377.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c378); }
          }
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            if (peg$c395.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c396); }
            }
            if (s3 !== peg$FAILED) {
              if (peg$c397.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c398); }
              }
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              if (s4 !== peg$FAILED) {
                s5 = [];
                if (peg$c377.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                }
                if (s6 !== peg$FAILED) {
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    if (peg$c377.test(input.charAt(peg$currPos))) {
                      s6 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                    }
                  }
                } else {
                  s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c399(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseINTEGER() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 202,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c377.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c378); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c377.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c378); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c400(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseINTEGER_POSITIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 203,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s2 = peg$c58;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c59); }
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parseINTEGER();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c401(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDECIMAL_POSITIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 204,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s2 = peg$c58;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c59); }
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parseDECIMAL();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c401(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDOUBLE_POSITIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 205,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c60;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c61); }
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parseDOUBLE();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c401(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseINTEGER_NEGATIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 206,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c60;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c61); }
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parseINTEGER();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c401(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDECIMAL_NEGATIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 207,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c60;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c61); }
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parseDECIMAL();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c401(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDOUBLE_NEGATIVE() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 208,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c60;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c61); }
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parseDOUBLE();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c401(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVar() {
      var s0, s1;

      var key    = peg$currPos * 271 + 209,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseVAR1();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseVAR2();
        if (s1 === peg$FAILED) {
          s1 = await peg$parseVAR3();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c402(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVAR1() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 210,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c302) {
        s1 = peg$c302;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c303); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseVARNAME();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVAR2() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 211,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 63) {
        s1 = peg$c403;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c404); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseVARNAME();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVAR3() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 212,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 36) {
        s1 = peg$c405;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c406); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseVARNAME();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVARNAME() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 213,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c367.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c368); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c369;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c370); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c367.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c368); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c369;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c370); }
          }
          if (s3 === peg$FAILED) {
            if (peg$c377.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c378); }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c369;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c370); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseStringQuotes() {
      var s0;

      var key    = peg$currPos * 271 + 214,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseSTRING_LITERAL1();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseSTRING_LITERAL2();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRING_LITERAL1() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 215,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c407;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c408); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsestringQ();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 39) {
            s3 = peg$c407;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c408); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSTRING_LITERAL2() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 216,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsedoubleQuotes();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsestringQ();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsedoubleQuotes();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsedoubleQuotes() {
      var s0, s1;

      var key    = peg$currPos * 271 + 217,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c409;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c410); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8220) {
          s1 = peg$c411;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c412); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8221) {
            s1 = peg$c413;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c414); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c415();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseQName() {
      var s0, s1;

      var key    = peg$currPos * 271 + 218,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePath();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePathBr();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c416(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePath() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 219,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsespace();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathAlternative();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseSubstring();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseBetweenExpression();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseLikeExpression();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c417(s2, s3, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathBr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      var key    = peg$currPos * 271 + 220,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c418;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c419); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsePathAlternativeBr();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseSubstring();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s6 = peg$c420;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c421); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parsespace();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseBetweenExpression();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseLikeExpression();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = await peg$c417(s3, s4, s8, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathAlternative() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 271 + 221,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePathSequence();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = await peg$parsespace();
        if (s5 !== peg$FAILED) {
          s6 = await peg$parseVERTICAL();
          if (s6 !== peg$FAILED) {
            s7 = await peg$parsespace();
            if (s7 !== peg$FAILED) {
              s8 = await peg$parsePathSequence();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = await peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseVERTICAL();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parsespace();
              if (s7 !== peg$FAILED) {
                s8 = await peg$parsePathSequence();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c422(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathAlternativeBr() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 271 + 222,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePathSequenceBr();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = await peg$parsespace();
        if (s5 !== peg$FAILED) {
          s6 = await peg$parseVERTICAL();
          if (s6 !== peg$FAILED) {
            s7 = await peg$parsespace();
            if (s7 !== peg$FAILED) {
              s8 = await peg$parsePathSequenceBr();
              if (s8 !== peg$FAILED) {
                s5 = [s5, s6, s7, s8];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = await peg$parsespace();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseVERTICAL();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parsespace();
              if (s7 !== peg$FAILED) {
                s8 = await peg$parsePathSequenceBr();
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c422(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathSequence() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 223,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePathEltOrInverse();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = await peg$parsePATH_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = await peg$parsePathEltOrInverse();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = await peg$parsePATH_SYMBOL();
            if (s5 !== peg$FAILED) {
              s6 = await peg$parsePathEltOrInverse();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c423(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathSequenceBr() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 224,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePathEltOrInverse();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = await peg$parsePATH_SYMBOL();
        if (s5 !== peg$FAILED) {
          s6 = await peg$parsePathEltOrInverse();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = await peg$parsePATH_SYMBOL();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parsePathEltOrInverse();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c423(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathEltOrInverse() {
      var s0, s1;

      var key    = peg$currPos * 271 + 225,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathElt3();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePathElt1();
        if (s1 === peg$FAILED) {
          s1 = await peg$parsePathElt2();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c424(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt1() {
      var s0, s1;

      var key    = peg$currPos * 271 + 226,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathElt();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c425(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt2() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 227,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c426;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c427); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathElt();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c428(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt3() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 228,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c429) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c430); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsePathElt();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsespace();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = await peg$c428(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathElt() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 229,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathPrimary();
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathMod();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c431(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathPrimary() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 271 + 230,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 33) {
        s1 = peg$c64;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c65); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePathNegatedPropertySet();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = await peg$parseiriP();
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c14;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c15); }
          }
          if (s1 !== peg$FAILED) {
            s2 = await peg$parsespace();
            if (s2 !== peg$FAILED) {
              s3 = await peg$parsePath();
              if (s3 !== peg$FAILED) {
                s4 = await peg$parsespace();
                if (s4 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c16;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                  }
                  if (s5 !== peg$FAILED) {
                    s1 = [s1, s2, s3, s4, s5];
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = await peg$parseLNameP();
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 97) {
                s0 = peg$c432;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c433); }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySet() {
      var s0, s1;

      var key    = peg$currPos * 271 + 231,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathNegatedPropertySet2();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePathNegatedPropertySet1();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c434(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySet1() {
      var s0, s1;

      var key    = peg$currPos * 271 + 232,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathOneInPropertySet();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c435(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySet2() {
      var s0, s1;

      var key    = peg$currPos * 271 + 233,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePathNegatedPropertySetBracketted();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c436(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathNegatedPropertySetBracketted() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 271 + 234,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c14;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parsespace();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parsePathOneInPropertySet();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = await peg$parsespace();
            if (s7 !== peg$FAILED) {
              s8 = await peg$parseVERTICAL();
              if (s8 !== peg$FAILED) {
                s9 = await peg$parsespace();
                if (s9 !== peg$FAILED) {
                  s10 = await peg$parsePathOneInPropertySet();
                  if (s10 !== peg$FAILED) {
                    s7 = [s7, s8, s9, s10];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = await peg$parsespace();
              if (s7 !== peg$FAILED) {
                s8 = await peg$parseVERTICAL();
                if (s8 !== peg$FAILED) {
                  s9 = await peg$parsespace();
                  if (s9 !== peg$FAILED) {
                    s10 = await peg$parsePathOneInPropertySet();
                    if (s10 !== peg$FAILED) {
                      s7 = [s7, s8, s9, s10];
                      s6 = s7;
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s3 = [s3, s4, s5];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parsespace();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c17); }
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet() {
      var s0;

      var key    = peg$currPos * 271 + 235,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parsePathOneInPropertySet3();
      if (s0 === peg$FAILED) {
        s0 = await peg$parsePathOneInPropertySet1();
        if (s0 === peg$FAILED) {
          s0 = await peg$parsePathOneInPropertySet2();
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet1() {
      var s0, s1;

      var key    = peg$currPos * 271 + 236,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseiriP();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseLNameP();
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 97) {
            s1 = peg$c432;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c433); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c437(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet2() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 237,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 94) {
        s1 = peg$c426;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c427); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseiriP();
        if (s2 === peg$FAILED) {
          s2 = await peg$parseLNameP();
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 97) {
              s2 = peg$c432;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c433); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c438(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathOneInPropertySet3() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 271 + 238,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c429) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c430); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 40) {
          s2 = peg$c14;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseiriP();
          if (s3 === peg$FAILED) {
            s3 = await peg$parseLNameP();
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 97) {
                s3 = peg$c432;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c433); }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c17); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = await peg$c438(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePathMod() {
      var s0;

      var key    = peg$currPos * 271 + 239,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 63) {
        s0 = peg$c403;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c404); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c68;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c69); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 43) {
            s0 = peg$c58;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c59); }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseiriP() {
      var s0;

      var key    = peg$currPos * 271 + 240,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseIRIREF();
      if (s0 === peg$FAILED) {
        s0 = await peg$parsePrefixedNameP();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePrefixedNameP() {
      var s0, s1;

      var key    = peg$currPos * 271 + 241,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsePNAME_LNP();
      if (s1 === peg$FAILED) {
        s1 = await peg$parsePNAME_NSP();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c382(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_NSP() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 242,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parseChars_String_prefix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c371;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c372); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c383(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_LNP() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 243,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c360;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c361); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePNAME_NSP();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseChars_String_prefix();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c439(s1, s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLNameP() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 244,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c360;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c361); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_prefix();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = await peg$c440(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVERTICAL() {
      var s0, s1;

      var key    = peg$currPos * 271 + 245,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 124) {
        s1 = peg$c318;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c319); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c441();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePATH_SYMBOL() {
      var s0, s1;

      var key    = peg$currPos * 271 + 246,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 46) {
        s1 = peg$c21;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c22); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 47) {
          s1 = peg$c70;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c71); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c442();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_square() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 247,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c367.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c368); }
      }
      if (s1 === peg$FAILED) {
        if (peg$c377.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c378); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s1 = peg$c369;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c370); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c367.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c368); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c369;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c370); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c21;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c22); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 32) {
                s3 = peg$c443;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c444); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 47) {
                  s3 = peg$c70;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c71); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s3 = peg$c60;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c61); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s3 = peg$c14;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 41) {
                        s3 = peg$c16;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                      }
                      if (s3 === peg$FAILED) {
                        if (peg$c377.test(input.charAt(peg$currPos))) {
                          s3 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c369;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c370); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c21;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c22); }
              }
              if (s3 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s3 = peg$c443;
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c444); }
                }
                if (s3 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 47) {
                    s3 = peg$c70;
                    peg$currPos++;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c71); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                      s3 = peg$c60;
                      peg$currPos++;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { await peg$fail(peg$c61); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 40) {
                        s3 = peg$c14;
                        peg$currPos++;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { await peg$fail(peg$c15); }
                      }
                      if (s3 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s3 = peg$c16;
                          peg$currPos++;
                        } else {
                          s3 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s3 === peg$FAILED) {
                          if (peg$c377.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                          } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 248,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c367.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c368); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c369;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c370); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c367.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c368); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c369;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c370); }
          }
          if (s3 === peg$FAILED) {
            if (peg$c377.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c378); }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c369;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c370); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c11) {
            s4 = peg$c11;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c12); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c377.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c378); }
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_prefix() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 271 + 249,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c367.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c368); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c369;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c370); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c60;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c61); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c367.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c368); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c369;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c370); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s3 = peg$c60;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c61); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c369;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c370); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c60;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c61); }
              }
              if (s3 === peg$FAILED) {
                if (peg$c377.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c11) {
            s4 = peg$c11;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c12); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c377.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c378); }
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_variables() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 250,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c418;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c419); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_prefix();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c420;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c421); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c445(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLN() {
      var s0;

      var key    = peg$currPos * 271 + 251,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseLNameINV();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseLNameINV2();
        if (s0 === peg$FAILED) {
          s0 = await peg$parseLNameINV3();
          if (s0 === peg$FAILED) {
            s0 = await peg$parseLName();
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseSubstring() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      var key    = peg$currPos * 271 + 252,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c418;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c419); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = await peg$parseINTEGER();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 44) {
            s5 = peg$c126;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c127); }
          }
          if (s5 !== peg$FAILED) {
            s6 = await peg$parsespace();
            if (s6 !== peg$FAILED) {
              s7 = await peg$parseINTEGER();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c420;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c421); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = null;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLNameSimple() {
      var s0;

      var key    = peg$currPos * 271 + 253,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = await peg$parseChars_String_variables();
      if (s0 === peg$FAILED) {
        s0 = await peg$parseChars_String_prefix();
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLName() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 271 + 254,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c360;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c361); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePropertyReference();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = await peg$parseChars_String_variables();
          if (s3 === peg$FAILED) {
            s3 = await peg$parseChars_String_prefix();
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsePathMod();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseSubstring();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseBetweenExpression();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseLikeExpression();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = await peg$c446(s1, s2, s3, s4, s5, s7, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLNameINV() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 271 + 255,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c360;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c361); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePropertyReference();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c429) {
            s3 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c447); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c14;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c15); }
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseLNameSimple();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s6 = peg$c16;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseSubstring();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsespace();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseBetweenExpression();
                      if (s9 === peg$FAILED) {
                        s9 = null;
                      }
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseLikeExpression();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = await peg$c448(s1, s2, s3, s5, s7, s9, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLNameINV3() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      var key    = peg$currPos * 271 + 256,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c360;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c361); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePropertyReference();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c429) {
            s3 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c447); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 40) {
              s4 = peg$c14;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c15); }
            }
            if (s4 !== peg$FAILED) {
              s5 = await peg$parsePNAME_NS();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parseLNameSimple();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c16;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseSubstring();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parsespace();
                      if (s9 !== peg$FAILED) {
                        s10 = await peg$parseBetweenExpression();
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = await peg$parseLikeExpression();
                          if (s11 === peg$FAILED) {
                            s11 = null;
                          }
                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = await peg$c449(s1, s2, s3, s5, s6, s8, s10, s11);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLNameINV2() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      var key    = peg$currPos * 271 + 257,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c360;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c361); }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsePropertyReference();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 94) {
            s3 = peg$c426;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c427); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parseLNameSimple();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseSubstring();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseBetweenExpression();
                  if (s7 === peg$FAILED) {
                    s7 = null;
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parseLikeExpression();
                    if (s8 === peg$FAILED) {
                      s8 = null;
                    }
                    if (s8 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = await peg$c450(s1, s2, s3, s4, s5, s7, s8);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseDoubleSquareBracketName() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 258,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsesquarePrefix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parsesquareVariable();
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c451(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesquarePrefix() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 259,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseChars_String_prefix();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c371;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c372); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsesquareVariable() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 260,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c452) {
        s1 = peg$c452;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c453); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_square();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c454) {
            s3 = peg$c454;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c455); }
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseRelation() {
      var s0;

      var key    = peg$currPos * 271 + 261,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c124;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c125); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c456) {
          s0 = peg$c456;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c457); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c458) {
            s0 = peg$c458;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c459); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c460) {
              s0 = peg$c460;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c461); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c462) {
                s0 = peg$c462;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c463); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                  s0 = peg$c365;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c366); }
                }
                if (s0 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 62) {
                    s0 = peg$c379;
                    peg$currPos++;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c380); }
                  }
                }
              }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsespace() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 262,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c443;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c444); }
      }
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (input.charCodeAt(peg$currPos) === 32) {
          s2 = peg$c443;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c444); }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c464();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsespaceObl() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 263,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s2 = peg$c443;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c444); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (input.charCodeAt(peg$currPos) === 32) {
            s2 = peg$c443;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c444); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c464();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestring() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 264,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c367.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c368); }
      }
      if (s2 === peg$FAILED) {
        if (peg$c377.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c378); }
        }
        if (s2 === peg$FAILED) {
          if (peg$c465.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c466); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
          if (s2 === peg$FAILED) {
            if (peg$c377.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c378); }
            }
            if (s2 === peg$FAILED) {
              if (peg$c465.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c466); }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c467(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestringQ() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 265,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c367.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c368); }
      }
      if (s2 === peg$FAILED) {
        if (peg$c377.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c378); }
        }
        if (s2 === peg$FAILED) {
          if (peg$c468.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c469); }
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
          if (s2 === peg$FAILED) {
            if (peg$c377.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c378); }
            }
            if (s2 === peg$FAILED) {
              if (peg$c468.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c469); }
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c467(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsestring2() {
      var s0, s1, s2;

      var key    = peg$currPos * 271 + 266,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = [];
      if (peg$c367.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c368); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c470(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLikeExpression() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 271 + 267,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c471) {
        s1 = input.substr(peg$currPos, 4);
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c472); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          s3 = await peg$parselikeString1();
          if (s3 === peg$FAILED) {
            s3 = await peg$parselikeString2();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c473(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parselikeString1() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 271 + 268,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c409;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c410); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 8220) {
          s1 = peg$c411;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c412); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 8221) {
            s1 = peg$c413;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c414); }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c375;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c376); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c369;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c370); }
            }
            if (s4 === peg$FAILED) {
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c367.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c368); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s4 = peg$c369;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c370); }
                }
                if (s4 === peg$FAILED) {
                  if (peg$c377.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                  }
                }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 37) {
              s4 = peg$c375;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c376); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 34) {
                s5 = peg$c409;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c410); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 8220) {
                  s5 = peg$c411;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c412); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 8221) {
                    s5 = peg$c413;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c414); }
                  }
                }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = await peg$c474(s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parselikeString2() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 271 + 269,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c407;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c408); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 37) {
          s2 = peg$c375;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c376); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c367.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c368); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s4 = peg$c369;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c370); }
            }
            if (s4 === peg$FAILED) {
              if (peg$c377.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c378); }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c367.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c368); }
              }
              if (s4 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 95) {
                  s4 = peg$c369;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c370); }
                }
                if (s4 === peg$FAILED) {
                  if (peg$c377.test(input.charAt(peg$currPos))) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c378); }
                  }
                }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 37) {
              s4 = peg$c375;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c376); }
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 39) {
                s5 = peg$c407;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c408); }
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = await peg$c474(s2, s3, s4);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseBetweenExpression() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      var key    = peg$currPos * 271 + 270,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c475) {
        s1 = input.substr(peg$currPos, 7);
        peg$currPos += 7;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c476); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parsespace();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 40) {
            s3 = peg$c14;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c15); }
          }
          if (s3 !== peg$FAILED) {
            s4 = await peg$parsespace();
            if (s4 !== peg$FAILED) {
              s5 = await peg$parseNumericExpression();
              if (s5 !== peg$FAILED) {
                s6 = await peg$parsespace();
                if (s6 !== peg$FAILED) {
                  s7 = await peg$parseComma();
                  if (s7 !== peg$FAILED) {
                    s8 = await peg$parsespace();
                    if (s8 !== peg$FAILED) {
                      s9 = await peg$parseNumericExpression();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c16;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { await peg$fail(peg$c17); }
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = await peg$c477(s5, s9);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


    			// parse can have multiple arguments
    			// parse(string, options) where options is an object
    			// {schema: VQ_Schema, symbol_table:JSON, context:class_identification_object, exprType:String}
    			// exprType: CLASS_NAME or null if other - at the moment it determines the precedence of resolving - class or property first in case of name clash
          options = arguments[1];
    			function makeVar(o) {return makeString(o);};

          // string -> idObject
    			// returns type of the identifier from symbol table. Null if does not exist.
    			async function resolveTypeFromSymbolTable(id) {
    				var context = options.context._id;

    				if(typeof options.symbol_table[context] === 'undefined') return null;

    				var st_row = options.symbol_table[context][id];
    				if (st_row) {
    					if(st_row.length == 0) return null;
    					if(st_row.length == 1){
    						return st_row[0].type
    					}
    					if(st_row.length > 1){
    						for (var symbol in st_row) {
    							if(st_row[symbol]["context"] == context) return st_row[symbol].type;
    						}
    					}
    					return st_row.type
    				} else {
    					return null
    				}
    				return null
    			};
    			// string -> idObject
    			// returns kind of the identifier from symbol table. Null if does not exist.
    			async function resolveKindFromSymbolTable(id) {
    				var context = options.context._id;

    				if(typeof options.symbol_table[context] === 'undefined') return null;

    				var st_row = options.symbol_table[context][id];
    				if (st_row) {
    					if(st_row.length == 0) return null;
    					if(st_row.length == 1){
    						return st_row[0].kind
    					}
    					if(st_row.length > 1){
    						for (var symbol in st_row) {
    							if(st_row[symbol]["context"] == context) return st_row[symbol].kind;
    						}
    					}
    					return st_row.kind
    				} else {
    					return null
    				}
    				return null
    			};
    			// string -> idObject
    			// returns type of the identifier from schema assuming that it is name of the class. Null if does not exist
    			async function resolveTypeFromSchemaForClass(id) {
    				var cls = await dataShapes.resolveClassByName({name: id})
    				if(cls["complite"] == false) return null;
    				if(cls["data"].length > 0){
    					return cls["data"][0];
    				}
    				
    				return null;
    			};
    			// string -> idObject
    			// returns type of the identifier from schema assuming that it is name of the property (attribute or association). Null if does not exist
    			async function resolveTypeFromSchemaForAttributeAndLink(id) {
    				
    				var aorl = await dataShapes.resolvePropertyByName({name: id})
    				// var aorl = options.schema.resolveAttributeByNameAndClass(options.context["localName"], id);
    				if(aorl["complite"] == false) return null;
    				var res = aorl["data"][0];
    				if(res){
    					if(res["data_cnt"] > 0 && res["object_cnt"] > 0) res["property_type"] = "DATA_OBJECT_PROPERTY";
    					else if(res["data_cnt"] > 0) res["property_type"] = "DATA_PROPERTY";
    					else if(res["object_cnt"] > 0) res["property_type"] = "OBJECT_PROPERTY";
    					return res;
    				}
    				// if (!res) { 
    					// res = options.schema.resolveLinkByName(id); 
    					// if (res) res["property_type"] = "OBJECT_PROPERTY"
    				// }
    				// else {
    						// res["parentType"] = aorl[1];
    						// res["property_type"] = "DATA_PROPERTY";
    				// };
    				
    				return null
    			};
    			// string -> idObject
    			// returns type of the identifier from schema. Looks everywhere. First in the symbol table,
    			// then in schema. Null if does not exist
    			async function resolveType(id) {
    			  
    			  if(id !== "undefined"){
    			  var t=await resolveTypeFromSymbolTable(id);
    				if (!t) {
    					if (options.exprType) {
    					  t= await resolveTypeFromSchemaForClass(id);
    					  if (!t) {
    						  t=await resolveTypeFromSchemaForAttributeAndLink(id)
    					  }
    					} else {
    					  t=await resolveTypeFromSchemaForAttributeAndLink(id);
    					  if (!t) {
    						  t=await resolveTypeFromSchemaForClass(id)
    					  }
    					}

    				}
    			  return t;}
    			  return null;
    			};
              //string -> string
        			// resolves kind of id. CLASS_ALIAS, PROPERTY_ALIAS, CLASS_NAME, CLASS_ALIAS, null
         	   async function resolveKind(id) {
    				if(id !== "undefined"){
        				    var k=await resolveKindFromSymbolTable(id);
        						if (!k) {
        						  if (options.exprType) {
        							  if (await resolveTypeFromSchemaForClass(id)) {
        									 k="CLASS_NAME";
        							  } else if (await resolveTypeFromSchemaForAttributeAndLink(id)) {
        									 k="PROPERTY_NAME";
        							  }
        							} else {
        							  if (await resolveTypeFromSchemaForAttributeAndLink(id)) {
        									k="PROPERTY_NAME";
        							  } else if (await resolveTypeFromSchemaForClass(id)) {
        									k="CLASS_NAME";
        							 }
        							}

        					  }
        						return k;
    				}
    				return null
        		  };
    			function pathOrReference(o) {
    				//var classInstences = ["a", "b", "c"] // seit vajadzigas visas klases
            // It does not make sense calculate this every time function is called, but ...
    				// console.log("oooooooooooo", o, options.symbol_table, options.symbol_table[options.context._id])

    				if(typeof o["PathProperty"]["PathAlternative"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0] !== "undefined" &&
    					o["PathProperty"]["PathAlternative"][0]["PathSequence"][1].length == 1 &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"] !== "undefined" &&
    					o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathMod"] == null &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["kind"] !== "undefined" &&
    					(o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["kind"] == "CLASS_ALIAS" ||
    					o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["kind"] == "BIND_ALIAS" ||
    					o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["kind"] == "UNRESOLVED_FIELD_ALIAS" ||
    					o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["kind"] == "PROPERTY_ALIAS")
    				){

    					return {Reference:
    						{name:o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["name"],
    						type:o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["type"]},
    					var:o["PathProperty"]["PathAlternative"][0]["PathSequence"][1][0][1]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"],
    					Substring : o["Substring"],
    					FunctionBETWEEN : o["FunctionBETWEEN"],
    					FunctionLike : o["FunctionLike"]
    					}

    				}
    				
    				if(typeof o["PathProperty"]["PathAlternative"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0] !== "undefined" &&
    					o["PathProperty"]["PathAlternative"][0]["PathSequence"][1].length == 1 &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"] !== "undefined" &&
    					o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathMod"] == null &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"] !== "undefined" &&
    					typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["kind"] === "undefined" 
    				){
    					var simbolTable = options.symbol_table[options.context._id][o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["name"]];

    					for (var symbol in simbolTable) {
    						if(simbolTable[symbol]["kind"] == "CLASS_ALIAS" ||
    						simbolTable[symbol]["kind"] == "BIND_ALIAS" ||
    						simbolTable[symbol]["kind"] == "UNRESOLVED_FIELD_ALIAS" ||
    						simbolTable[symbol]["kind"] == "PROPERTY_ALIAS"){
								
								if(typeof o["PathProperty"]["PathAlternative"][0]["PathSequence"][1][0][1]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["PrefixedName"] !== "undefined"){
									return {Reference:
    								{name:o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["name"],
    								type:o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["type"]},
    								var:o["PathProperty"]["PathAlternative"][0]["PathSequence"][1][0][1]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["PrefixedName"]["var"],
    								Substring : o["Substring"],
    								FunctionBETWEEN : o["FunctionBETWEEN"],
    								FunctionLike : o["FunctionLike"]
    							}
								}
								
    							return {Reference:
    								{name:o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["name"],
    								type:o["PathProperty"]["PathAlternative"][0]["PathSequence"][0]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"]["type"]},
    								var:o["PathProperty"]["PathAlternative"][0]["PathSequence"][1][0][1]["PathEltOrInverse"]["PathElt"]["PathPrimary"]["var"],
    								Substring : o["Substring"],
    								FunctionBETWEEN : o["FunctionBETWEEN"],
    								FunctionLike : o["FunctionLike"]
    							}
    						}
    					}
    					
    				}

    				return o;
    			};

    			function checkIfVariable(Variable) {
    				// console.log("Variable", makeVar(Variable));
    				// if(makeVar(Variable) != "student-Number") return;
    				return Variable;
    			};
    			function transformExpressionIntegerScopeToList(start, end){
    				var s = parseInt(start["Number"]);
    				var e = parseInt(end["Number"]);
    				var expressionList = [];
    				for (var i = s; i <= e; i++) {
    					expressionList.push({"NumericLiteral": {"Number": i}});
    					if(i!=e) expressionList.push({"Comma": ","});
    				}
    				return expressionList;
    			}
    		

    peg$result = await peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        await peg$fail({ type: "end", description: "end of input" });
      }

      throw await peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? await peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : await peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})()
}).call(this);	