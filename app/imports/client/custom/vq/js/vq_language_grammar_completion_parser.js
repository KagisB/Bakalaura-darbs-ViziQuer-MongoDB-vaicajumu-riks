
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  async function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  async function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { LanguageGrammar: peg$parseLanguageGrammar },
        peg$startRuleFunction  = peg$parseLanguageGrammar,

        peg$c0 = /^[A-Za-z]/,
        peg$c1 = { type: "class", value: "[A-Za-z]", description: "[A-Za-z]" },
        peg$c2 = "_",
        peg$c3 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c4 = "[",
        peg$c5 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c6 = "]",
        peg$c7 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c8 = ",",
        peg$c9 = { type: "literal", value: ",", description: "\",\"" },
        peg$c10 = "",
        peg$c11 = async function() {
        				await addContinuation(await location(), "[AUTO_LANGUAGE]", 90, 4);
        				await addContinuation(await location(), "ab", 90, 4);
        				await addContinuation(await location(), "aa", 90, 4);
        				await addContinuation(await location(), "af", 90, 4);
        				await addContinuation(await location(), "ak", 90, 4);
        				await addContinuation(await location(), "sq", 90, 4);
        				await addContinuation(await location(), "am", 90, 4);
        				await addContinuation(await location(), "ar", 90, 4);
        				await addContinuation(await location(), "an", 90, 4);
        				await addContinuation(await location(), "hy", 90, 4);
        				await addContinuation(await location(), "as", 90, 4);
        				await addContinuation(await location(), "av", 90, 4);
        				await addContinuation(await location(), "ae", 90, 4);
        				await addContinuation(await location(), "ay", 90, 4);
        				await addContinuation(await location(), "az", 90, 4);
        				await addContinuation(await location(), "bm", 90, 4);
        				await addContinuation(await location(), "ba", 90, 4);
        				await addContinuation(await location(), "eu", 90, 4);
        				await addContinuation(await location(), "be", 90, 4);
        				await addContinuation(await location(), "bn", 90, 4);
        				await addContinuation(await location(), "bi", 90, 4);
        				await addContinuation(await location(), "bs", 90, 4);
        				await addContinuation(await location(), "br", 90, 4);
        				await addContinuation(await location(), "bg", 90, 4);
        				await addContinuation(await location(), "my", 90, 4);
        				await addContinuation(await location(), "ca", 90, 4);
        				await addContinuation(await location(), "ch", 90, 4);
        				await addContinuation(await location(), "ce", 90, 4);
        				await addContinuation(await location(), "ny", 90, 4);
        				await addContinuation(await location(), "zh", 90, 4);
        				await addContinuation(await location(), "cv", 90, 4);
        				await addContinuation(await location(), "kw", 90, 4);
        				await addContinuation(await location(), "co", 90, 4);
        				await addContinuation(await location(), "cr", 90, 4);
        				await addContinuation(await location(), "hr", 90, 4);
        				await addContinuation(await location(), "cs", 90, 4);
        				await addContinuation(await location(), "da", 90, 4);
        				await addContinuation(await location(), "dv", 90, 4);
        				await addContinuation(await location(), "nl", 90, 4);
        				await addContinuation(await location(), "dz", 90, 4);
        				await addContinuation(await location(), "en", 90, 4);
        				await addContinuation(await location(), "eo", 90, 4);
        				await addContinuation(await location(), "et", 90, 4);
        				await addContinuation(await location(), "ee", 90, 4);
        				await addContinuation(await location(), "fo", 90, 4);
        				await addContinuation(await location(), "fj", 90, 4);
        				await addContinuation(await location(), "fi", 90, 4);
        				await addContinuation(await location(), "fr", 90, 4);
        				await addContinuation(await location(), "ff", 90, 4);
        				await addContinuation(await location(), "gl", 90, 4);
        				await addContinuation(await location(), "ka", 90, 4);
        				await addContinuation(await location(), "de", 90, 4);
        				await addContinuation(await location(), "el", 90, 4);
        				await addContinuation(await location(), "gn", 90, 4);
        				await addContinuation(await location(), "gu", 90, 4);
        				await addContinuation(await location(), "ht", 90, 4);
        				await addContinuation(await location(), "ha", 90, 4);
        				await addContinuation(await location(), "he", 90, 4);
        				await addContinuation(await location(), "hz", 90, 4);
        				await addContinuation(await location(), "hi", 90, 4);
        				await addContinuation(await location(), "ho", 90, 4);
        				await addContinuation(await location(), "hu", 90, 4);
        				await addContinuation(await location(), "ia", 90, 4);
        				await addContinuation(await location(), "id", 90, 4);
        				await addContinuation(await location(), "ie", 90, 4);
        				await addContinuation(await location(), "ga", 90, 4);
        				await addContinuation(await location(), "ig", 90, 4);
        				await addContinuation(await location(), "ik", 90, 4);
        				await addContinuation(await location(), "io", 90, 4);
        				await addContinuation(await location(), "is", 90, 4);
        				await addContinuation(await location(), "it", 90, 4);
        				await addContinuation(await location(), "iu", 90, 4);
        				await addContinuation(await location(), "ja", 90, 4);
        				await addContinuation(await location(), "jv", 90, 4);
        				await addContinuation(await location(), "kl", 90, 4);
        				await addContinuation(await location(), "kn", 90, 4);
        				await addContinuation(await location(), "kr", 90, 4);
        				await addContinuation(await location(), "ks", 90, 4);
        				await addContinuation(await location(), "kk", 90, 4);
        				await addContinuation(await location(), "km", 90, 4);
        				await addContinuation(await location(), "ki", 90, 4);
        				await addContinuation(await location(), "rw", 90, 4);
        				await addContinuation(await location(), "ky", 90, 4);
        				await addContinuation(await location(), "kv", 90, 4);
        				await addContinuation(await location(), "kg", 90, 4);
        				await addContinuation(await location(), "ko", 90, 4);
        				await addContinuation(await location(), "ku", 90, 4);
        				await addContinuation(await location(), "kj", 90, 4);
        				await addContinuation(await location(), "la", 90, 4);
        				await addContinuation(await location(), "lb", 90, 4);
        				await addContinuation(await location(), "lg", 90, 4);
        				await addContinuation(await location(), "li", 90, 4);
        				await addContinuation(await location(), "ln", 90, 4);
        				await addContinuation(await location(), "lo", 90, 4);
        				await addContinuation(await location(), "lt", 90, 4);
        				await addContinuation(await location(), "lu", 90, 4);
        				await addContinuation(await location(), "lv", 90, 4);
        				await addContinuation(await location(), "gv", 90, 4);
        				await addContinuation(await location(), "mk", 90, 4);
        				await addContinuation(await location(), "mg", 90, 4);
        				await addContinuation(await location(), "ms", 90, 4);
        				await addContinuation(await location(), "ml", 90, 4);
        				await addContinuation(await location(), "mt", 90, 4);
        				await addContinuation(await location(), "mi", 90, 4);
        				await addContinuation(await location(), "mr", 90, 4);
        				await addContinuation(await location(), "mh", 90, 4);
        				await addContinuation(await location(), "mn", 90, 4);
        				await addContinuation(await location(), "na", 90, 4);
        				await addContinuation(await location(), "nv", 90, 4);
        				await addContinuation(await location(), "nd", 90, 4);
        				await addContinuation(await location(), "ne", 90, 4);
        				await addContinuation(await location(), "ng", 90, 4);
        				await addContinuation(await location(), "nb", 90, 4);
        				await addContinuation(await location(), "nn", 90, 4);
        				await addContinuation(await location(), "no", 90, 4);
        				await addContinuation(await location(), "ii", 90, 4);
        				await addContinuation(await location(), "nr", 90, 4);
        				await addContinuation(await location(), "oc", 90, 4);
        				await addContinuation(await location(), "oj", 90, 4);
        				await addContinuation(await location(), "cu", 90, 4);
        				await addContinuation(await location(), "om", 90, 4);
        				await addContinuation(await location(), "or", 90, 4);
        				await addContinuation(await location(), "os", 90, 4);
        				await addContinuation(await location(), "pa", 90, 4);
        				await addContinuation(await location(), "pi", 90, 4);
        				await addContinuation(await location(), "fa", 90, 4);
        				await addContinuation(await location(), "pl", 90, 4);
        				await addContinuation(await location(), "ps", 90, 4);
        				await addContinuation(await location(), "pt", 90, 4);
        				await addContinuation(await location(), "qu", 90, 4);
        				await addContinuation(await location(), "rm", 90, 4);
        				await addContinuation(await location(), "rn", 90, 4);
        				await addContinuation(await location(), "ro", 90, 4);
        				await addContinuation(await location(), "ru", 90, 4);
        				await addContinuation(await location(), "sa", 90, 4);
        				await addContinuation(await location(), "sc", 90, 4);
        				await addContinuation(await location(), "sd", 90, 4);
        				await addContinuation(await location(), "se", 90, 4);
        				await addContinuation(await location(), "sm", 90, 4);
        				await addContinuation(await location(), "sg", 90, 4);
        				await addContinuation(await location(), "sr", 90, 4);
        				await addContinuation(await location(), "gd", 90, 4);
        				await addContinuation(await location(), "sn", 90, 4);
        				await addContinuation(await location(), "si", 90, 4);
        				await addContinuation(await location(), "sk", 90, 4);
        				await addContinuation(await location(), "sl", 90, 4);
        				await addContinuation(await location(), "so", 90, 4);
        				await addContinuation(await location(), "st", 90, 4);
        				await addContinuation(await location(), "es", 90, 4);
        				await addContinuation(await location(), "su", 90, 4);
        				await addContinuation(await location(), "sw", 90, 4);
        				await addContinuation(await location(), "ss", 90, 4);
        				await addContinuation(await location(), "sv", 90, 4);
        				await addContinuation(await location(), "ta", 90, 4);
        				await addContinuation(await location(), "te", 90, 4);
        				await addContinuation(await location(), "tg", 90, 4);
        				await addContinuation(await location(), "th", 90, 4);
        				await addContinuation(await location(), "ti", 90, 4);
        				await addContinuation(await location(), "bo", 90, 4);
        				await addContinuation(await location(), "tk", 90, 4);
        				await addContinuation(await location(), "tl", 90, 4);
        				await addContinuation(await location(), "tn", 90, 4);
        				await addContinuation(await location(), "to", 90, 4);
        				await addContinuation(await location(), "tr", 90, 4);
        				await addContinuation(await location(), "ts", 90, 4);
        				await addContinuation(await location(), "tt", 90, 4);
        				await addContinuation(await location(), "tw", 90, 4);
        				await addContinuation(await location(), "ty", 90, 4);
        				await addContinuation(await location(), "ug", 90, 4);
        				await addContinuation(await location(), "uk", 90, 4);
        				await addContinuation(await location(), "ur", 90, 4);
        				await addContinuation(await location(), "uz", 90, 4);
        				await addContinuation(await location(), "ve", 90, 4);
        				await addContinuation(await location(), "vi", 90, 4);
        				await addContinuation(await location(), "vo", 90, 4);
        				await addContinuation(await location(), "wa", 90, 4);
        				await addContinuation(await location(), "cy", 90, 4);
        				await addContinuation(await location(), "wo", 90, 4);
        				await addContinuation(await location(), "fy", 90, 4);
        				await addContinuation(await location(), "xh", 90, 4);
        				await addContinuation(await location(), "yi", 90, 4);
        				await addContinuation(await location(), "yo", 90, 4);
        				await addContinuation(await location(), "za", 90, 4);
        				await addContinuation(await location(), "zu", 90, 4);
        			},
        peg$c12 = async function() {await addContinuation(await location(), ",", 50, 4);},
        peg$c13 = async function() {await error(await returnContinuation()); return;},

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    async function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    async function location() {
      return await peg$computeLocation(peg$savedPos, peg$currPos);
    }

    async function expected(description) {
      throw await peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function error(message) {
      throw await peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    async function peg$computeLocation(startPos, endPos) {
      var startPosDetails = await peg$computePosDetails(startPos),
          endPosDetails   = await peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    async function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    async function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    async function peg$parseLanguageGrammar() {
      var s0, s1, s2, s3, s4, s5, s6;

      var key    = peg$currPos * 6 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parseLanguage();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = await peg$parsecomma();
        if (s5 !== peg$FAILED) {
          s6 = await peg$parseLanguage();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = await peg$parsecomma();
          if (s5 !== peg$FAILED) {
            s6 = await peg$parseLanguage();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseend();
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLanguage() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 6 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseLanguage_c();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (peg$c0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c1); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c2;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c3); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s3 = peg$c4;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c5); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 93) {
                s3 = peg$c6;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c7); }
              }
            }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (peg$c0.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c1); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c2;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c3); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 91) {
                s5 = peg$c4;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c5); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                  s5 = peg$c6;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c7); }
                }
              }
            }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (peg$c0.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c1); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 95) {
                s5 = peg$c2;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c3); }
              }
              if (s5 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 91) {
                  s5 = peg$c4;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c5); }
                }
                if (s5 === peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s5 = peg$c6;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { await peg$fail(peg$c7); }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecomma() {
      var s0, s1, s2;

      var key    = peg$currPos * 6 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parsecomma_c();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c8;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c9); }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseLanguage_c() {
      var s0, s1;

      var key    = peg$currPos * 6 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c10;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c11();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsecomma_c() {
      var s0, s1;

      var key    = peg$currPos * 6 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c10;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c12();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseend() {
      var s0, s1;

      var key    = peg$currPos * 6 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$c10;
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c13();
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


    			// parse can have multiple arguments
    			// parse(string, options) where options is an object
    			// {schema: VQ_Schema, symbol_table:JSON, context:class_identification_object}
          options = arguments[1];
            			//console.log(options);
            			
          var continuations = {};
              
              function makeArray(value){
              	if (continuations[value]==null) {
              		continuations[value] = {};
              	}
              	return continuations;
              }
              
              function addContinuation(place, continuation, priority, type, start_end){
              	var position = "start";
              	if(start_end != null)position = start_end;
              	makeArray(place[position]["offset"]);
              	continuations[place[position]["offset"]][continuation]={name:continuation, priority:priority, type:type};
              }
              function returnContinuation(){
    		  continuations["time"] = options.time
              	return JSON.stringify(continuations,null,2);
              }

    		

    peg$result = await peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        await peg$fail({ type: "end", description: "end of input" });
      }

      throw await peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? await peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : await peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  export {
    peg$SyntaxError as SyntaxError,
    peg$parse as parse
  }