import { makeString } from './parserCommon';
import { dataShapes } from '/imports/client/custom/vq/js/DataShapes';

  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  async function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  async function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { Grammar: peg$parseGrammar },
        peg$startRuleFunction  = peg$parseGrammar,

        peg$c0 = async function(Main) {return makeVar(Main)},
        peg$c1 = /^[^A-Za-z0-9:_\-]/,
        peg$c2 = { type: "class", value: "[^A-Za-z0-9:_-]", description: "[^A-Za-z0-9:_-]" },
        peg$c3 = /^[0-9]/,
        peg$c4 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c5 = "-",
        peg$c6 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c7 = async function(PrefixedName) {return await checkIfVariable(makeVar(PrefixedName))},
        peg$c8 = ":",
        peg$c9 = { type: "literal", value: ":", description: "\":\"" },
        peg$c10 = async function(Prefix) {return makeVar(Prefix)},
        peg$c11 = async function(Variable) {return makeVar(Variable)},
        peg$c12 = "[",
        peg$c13 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c14 = "]",
        peg$c15 = { type: "literal", value: "]", description: "\"]\"" },
        peg$c16 = async function(Chars_String_variables) {return Chars_String_variables},
        peg$c17 = /^[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]/,
        peg$c18 = { type: "class", value: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]", description: "[A-Za-z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]" },
        peg$c19 = "_",
        peg$c20 = { type: "literal", value: "_", description: "\"_\"" },
        peg$c21 = "@",
        peg$c22 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c23 = /^[a-zA-Z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]/,
        peg$c24 = { type: "class", value: "[a-zA-Z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]", description: "[a-zA-Z\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]" },
        peg$c25 = /^[a-zA-Z0-9\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]/,
        peg$c26 = { type: "class", value: "[a-zA-Z0-9\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]", description: "[a-zA-Z0-9\u0101\u010D\u0113\u0123\u012B\u0137\u013C\u0146\u0161\u016B\u017E\u0100\u010C\u0112\u0122\u012A\u0136\u013B\u0145\u0160\u016A\u017D]" },
        peg$c27 = async function(StringLang) {return makeVar(StringLang)},

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$resultsCache = {},

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    async function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    async function location() {
      return await peg$computeLocation(peg$savedPos, peg$currPos);
    }

    async function expected(description) {
      throw await peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function error(message) {
      throw await peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        await peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    async function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    async function peg$computeLocation(startPos, endPos) {
      var startPosDetails = await peg$computePosDetails(startPos),
          endPosDetails   = await peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    async function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    async function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    async function peg$parseGrammar() {
      var s0, s1;

      var key    = peg$currPos * 9 + 0,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseMain();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c0(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseMain() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 9 + 1,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseAllElse();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = await peg$parseExpression();
        if (s4 !== peg$FAILED) {
          s5 = await peg$parseAllElse();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = await peg$parseExpression();
          if (s4 !== peg$FAILED) {
            s5 = await peg$parseAllElse();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseAllElse() {
      var s0, s1;

      var key    = peg$currPos * 9 + 2,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = [];
      if (peg$c1.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c2); }
      }
      if (s1 === peg$FAILED) {
        if (peg$c3.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c4); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c5;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c6); }
          }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$c1.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c2); }
        }
        if (s1 === peg$FAILED) {
          if (peg$c3.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c4); }
          }
          if (s1 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s1 = peg$c5;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c6); }
            }
          }
        }
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseExpression() {
      var s0, s1, s2, s3, s4;

      var key    = peg$currPos * 9 + 3,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parsePNAME_NS();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        s3 = await peg$parseVariable();
        if (s3 !== peg$FAILED) {
          s4 = await peg$parseStringLang();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c7(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parsePNAME_NS() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 9 + 4,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = await peg$parseChars_String_prefix();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c8;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c9); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c10(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseVariable() {
      var s0, s1;

      var key    = peg$currPos * 9 + 5,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = await peg$parseChars_String_variables();
      if (s1 === peg$FAILED) {
        s1 = await peg$parseChars_String_prefix();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c11(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_variables() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 9 + 6,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c12;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c13); }
      }
      if (s1 !== peg$FAILED) {
        s2 = await peg$parseChars_String_prefix();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 93) {
            s3 = peg$c14;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c15); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = await peg$c16(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseChars_String_prefix() {
      var s0, s1, s2, s3;

      var key    = peg$currPos * 9 + 7,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      if (peg$c17.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c18); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s1 = peg$c19;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c20); }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c17.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c18); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 95) {
            s3 = peg$c19;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c20); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s3 = peg$c5;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c6); }
            }
            if (s3 === peg$FAILED) {
              if (peg$c3.test(input.charAt(peg$currPos))) {
                s3 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c4); }
              }
            }
          }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c17.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c18); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 95) {
              s3 = peg$c19;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c20); }
            }
            if (s3 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c5;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c6); }
              }
              if (s3 === peg$FAILED) {
                if (peg$c3.test(input.charAt(peg$currPos))) {
                  s3 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { await peg$fail(peg$c4); }
                }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }

    async function peg$parseStringLang() {
      var s0, s1, s2, s3, s4, s5;

      var key    = peg$currPos * 9 + 8,
          cached = peg$resultsCache[key];

      if (cached) {
        peg$currPos = cached.nextPos;

        return cached.result;
      }

      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s2 = peg$c21;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { await peg$fail(peg$c22); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c23.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { await peg$fail(peg$c24); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          if (input.charCodeAt(peg$currPos) === 45) {
            s5 = peg$c5;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { await peg$fail(peg$c6); }
          }
          if (s5 === peg$FAILED) {
            if (peg$c25.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c26); }
            }
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            if (input.charCodeAt(peg$currPos) === 45) {
              s5 = peg$c5;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { await peg$fail(peg$c6); }
            }
            if (s5 === peg$FAILED) {
              if (peg$c25.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { await peg$fail(peg$c26); }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s2 = [s2, s3, s4];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = await peg$c27(s1);
      }
      s0 = s1;

      peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

      return s0;
    }


    			// parse can have multiple arguments
    			// parse(string, options) where options is an object
    			// {schema: VQ_Schema, symbol_table:JSON, context:class_identification_object}
    			options = arguments[1];
    			//console.log(options);

    			function makeVar(o) {return makeString(o);};

    			// string -> idObject
    			// returns type of the identifier from symbol table. Null if does not exist.
    			// returns type of the identifier from symbol table. Null if does not exist.
    			async function resolveTypeFromSymbolTable(id) {
    				var context = options.context._id;

    				if(typeof options.symbol_table[context] === 'undefined') return null;

    				var st_row = options.symbol_table[context][id];
    				if (st_row) {
    					if(st_row.length == 0) return null;
    					if(st_row.length == 1){
    						return st_row[0].type
    					}
    					if(st_row.length > 1){
    						for (var symbol in st_row) {
    							if(st_row[symbol]["context"] == context) return st_row[symbol].type;
    						}
    					}
    					return st_row.type
    				} else {
    					return null
    				}
    				
    			};
    			// string -> idObject
    			// returns type of the identifier from schema assuming that it is name of the class. Null if does not exist
    			async function resolveTypeFromSchemaForClass(id) {
					let scName = options.schemaName;
					let param = {name: id}
					if(typeof scName !== "undefined" && scName !== null && scName !== "" && dataShapes.schema.schema !== scName) {
						param["schema"] = scName;
					}	
    				var cls = await dataShapes.resolveClassByName(param)
    				if(cls["complete"] == false) return null;
    				if(cls["data"].length > 0){
    					return cls["data"][0];
    				}
    				
    				return null;
    			};
    			// string -> idObject
    			// returns type of the identifier from schema assuming that it is name of the property (attribute or association). Null if does not exist
    			async function resolveTypeFromSchemaForAttributeAndLink(id) {
    				let scName = options.schemaName;
					let param = {name: id}
					if(typeof scName !== "undefined" && scName !== null && scName !== "" && dataShapes.schema.schema !== scName) {
						param["schema"] = scName;
					}	
    				var aorl = await dataShapes.resolvePropertyByName(param)
    				if(aorl["complete"] == false) return null;
    				var res = aorl["data"][0];
    				if(res){
    					if(res["data_cnt"] > 0 && res["object_cnt"] > 0) res["property_type"] = "DATA_OBJECT_PROPERTY";
    					else if(res["data_cnt"] > 0) res["property_type"] = "DATA_PROPERTY";
    					else if(res["object_cnt"] > 0) res["property_type"] = "OBJECT_PROPERTY";
    					return res;
    				}
    				
    				return null
    			};
    			// string -> idObject
    			// returns type of the identifier from schema. Looks everywhere. First in the symbol table,
    			// then in schema. Null if does not exist
    			async function resolveType(id) {
    			  if(id !== "undefined"){
    			  var t=await resolveTypeFromSymbolTable(id);
    				if (!t) {
    					if (options.exprType) {
    					  t= await resolveTypeFromSchemaForClass(id);
    					  if (!t) {
    						  t=await resolveTypeFromSchemaForAttributeAndLink(id)
    					  }
    					} else {
    					  t=await resolveTypeFromSchemaForAttributeAndLink(id);
    					  if (!t) {
    						  t=await resolveTypeFromSchemaForClass(id)
    					  }
    					}

    				}
    			  return t;}
    			  return null;
    			};

    			
    			async function checkIfVariable(Variable) {
    				var v=makeVar(Variable)
					if(v.indexOf("@") !== -1) v = v.substring(0, v.indexOf("@"))
					
    				if(await resolveType(v) == null ) return v.replace(/-/g, " - ");
    				return Variable;
    			};
    			
    		

    peg$result = await peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        await peg$fail({ type: "end", description: "end of input" });
      }

      throw await peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? await peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : await peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  export {
    peg$SyntaxError as SyntaxError,
    peg$parse as parse
  }
